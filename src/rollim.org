# -*- eval: (face-remap-add-relative 'default '(:family "BQN386 Unicode" :height 180)); -*-
#+TITLE: A coding impromptu 
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="assets/style.css"/>
#+HTML_HEAD: <link rel="icon" href="assets/favicon.ico" type="image/x-icon">
#+HTML_HEAD: <style>
#+HTML_HEAD:   #table-of-contents > h2 { display: none; } /* Hide the default TOC heading */
#+HTML_HEAD:   #table-of-contents > ul { display: block; } /* Ensure TOC content is shown */
#+HTML_HEAD: </style>

This post is a rolling collection of algorithms and computational ideas I like, implemented in BQN:

#+TOC: headlines 1 :ignore-title t

Extrapolating Perlis' remark[fn:1], it's likely that a group of 50 individuals
would devise 35 to 40 distinct solutions to even the simplest problem in BQN. Therefore, I will frequently
juxtapose my implementations with those of seasoned /BQNators/[fn:2].


** Z algorithm

This is a very efficient procedure that finds prefix strings in [[https://cp-algorithms.com/string/z-function.html][linear time]]. The imperative
implementation reads:

#+begin_src bqn :tangle ./bqn/rollim.bqn :exports both
  ZI ← {𝕊s:
    l‿r‿z ← 0⚇0 0‿0‿s
    z ⊣ {
      v ← r(⊢1⊸+•_while_{(𝕩+𝕨)<≠s ? =´⟨𝕩,𝕩+𝕨⟩⊑¨<s ; 0}<◶({z⊑˜𝕩-l}⌊-+1)‿0)𝕩
      r <◶@‿{𝕊: l↩𝕩-v+1 ⋄ r↩𝕩} 𝕩+v-1
      z v⌾(𝕩⊸⊑)↩
    }¨ ↕≠s
  }
  ZI "abacabadabacaba"
#+end_src

#+RESULTS:
: ⟨ 15 0 1 0 3 0 1 0 7 0 1 0 3 0 1 ⟩

Two algorithmic improvements can be made here, namely only iterate
over indices where the character found is equal to the first character, and only search
to extend the count if it goes up to the end of r:

#+begin_src bqn :tangle ./bqn/rollim.bqn :exports both
  ZFun ← {𝕊s:
    CountEq ← { 1⊸+•_while_((≠𝕨)⊸≤◶⟨⊑⟜𝕨≡⊑⟜𝕩,0⟩) 0 }
    l←r←0 ⋄ Ulr ← {(r⌈↩𝕨+𝕩)>r ? l↩𝕨 ⋄ 𝕩; 𝕩}
    SearchEq ← ⊣ Ulr ⊢ + + CountEq○(↓⟜s) ⊢
    Set ← {i𝕊𝕩: ((r-i) (i SearchEq 0⌈⊣)⍟≤ (i-l)⊑𝕩)⌾(i⊸⊑) 𝕩 }
    (⌽1↓/⊑⊸=s) Set´˜ ↑˜≠s
  }
#+end_src

I came up with two array versions, with quadratic and cubic time complexities respectively:

#+begin_src bqn :tangle ./bqn/rollim.bqn :exports both
  ZAQ ← ¯1↓↓(+´·∧`⊣=≠⊸↑)¨<
  ZAC ← (+´∧`)¨<=↕∘≠{«⍟𝕨𝕩}⌜<
  (ZAQ≡ZAC)◶@‿ZAC "abacabadabacaba"
#+end_src

#+RESULTS:
: ⟨ 15 0 1 0 3 0 1 0 7 0 1 0 3 0 1 ⟩

With further refinements, the earlier solutions can be transformed into:

#+begin_src bqn :tangle ./bqn/rollim.bqn :exports both
  ZAQ‿ZAC ← {(+´∧`)¨𝕏}¨ ⟨≠↑↓=⌽∘↑, <=«⍟(↕∘≠)⟩
  (ZAQ≡ZAC)◶@‿ZAC "abacabadabacaba"
#+end_src

#+RESULTS:
: ⟨ 15 0 1 0 3 0 1 0 7 0 1 0 3 0 1 ⟩

** Longest increasing sub-sequence

This [[https://en.wikipedia.org/wiki/Longest_increasing_subsequence][problem]] can be solved in \(O(n\log n)\) using dynamic programming. Here is an
imperative implementation which is quadratic, but can be optimized:

#+begin_src bqn :tangle ./bqn/rollim.bqn :exports both
  LISI ← {
    k‿dp ← ¯1‿(∞¨𝕩)
    {i ← ∧´◶(⊑⊐⟜0)‿{𝕊:k+↩1} dp<𝕩 ⋄ dp 𝕩⌾(i⊸⊑)↩}¨ 𝕩
    +´∞>dp
  }
  LISI¨ ⟨0‿1‿0‿3‿2‿3, 10‿9‿2‿5‿3‿7‿101‿18, 7‿7‿7‿7‿7⟩
#+end_src

#+RESULTS:
: ⟨ 4 4 1 ⟩

A more elegant array solution is:

#+begin_src bqn :tangle ./bqn/rollim.bqn :exports both
  LISA ← +´∞≠∞¨{𝕨⌾((⊑𝕩⍋𝕨-1)⊸⊑)𝕩}´⌽
  LISA¨ ⟨0‿1‿0‿3‿2‿3, 10‿9‿2‿5‿3‿7‿101‿18, 7‿7‿7‿7‿7⟩
#+end_src

#+RESULTS:
: ⟨ 4 4 1 ⟩

Let's =)explain= this optimized version, so we can truly appreciate its beauty.
So it[[https://en.wikipedia.org/wiki/Slaughterhouse-Five][ goes]]: 

#+begin_src bqn :exports results
  )explain +´∞≠∞¨{𝕨⌾((⊑𝕩⍋𝕨-1)⊸⊑)𝕩}´⌽
#+end_src

#+RESULTS:
#+begin_example
 +´∞≠∞¨{𝕨⌾((⊑𝕩⍋𝕨-1)⊸⊑)𝕩}´⌽ 
 │ │ │ ││    │ │ │  │ │  │ 
 │ │ │ {┼────┼─┼─┼──┼─┼─´│ 
 │ │ ∞¨ │    │ │ │  │ │ ││ 
 │ │  └─┼────┼─┼─┼──┼─┼─┼⌽ 
 │ ∞≠───┼────┼─┼─┼──┼─┼─┘  
 +´ │   │    │ │ │  │ │    
  └─┘   │    │ │ │  │ │    
        │    │ 𝕨-1  │ │    
        │    𝕩⍋─┘   │ │    
        │   ⊑─┘     │ │    
        │   └──────⊸⊑ │    
        𝕨⌾─────────┘  │    
         ├────────────𝕩    
╶────────┘
#+end_example

The full expression is structured as a two-train: we sum all finite entries from the
result of the rightmost three-train. The three-train is a right fold over the reversed
input, with an initial array of =∞= and the same length as the input. In each step
of the fold, we modify the right argument using under: we perform a binary search
with strict comparison to find where the next element should go.
The element is either placed at the end of the unfilled region, or it replaces
the first element that is greater than =𝕨=. Since BQN uses a based array model,
we pick the enclosed atom from this operation's result.

** N-queens problem

This problem is the archetypal example of backtracking. Initially, I tried to solve it
using a function to place the queens in the full board, hoping that it would lead to a
more array oriented solution:

#+begin_src bqn :tangle ./bqn/rollim.bqn :exports both
  8 {((∨⌜´0⊸=)∨(0=-⌜´)∨0=+⌜´) 𝕩-¨<↕𝕨} 2‿3
#+end_src

#+RESULTS:
#+begin_example
┌─                 
╵ 0 1 0 1 0 1 0 0  
  0 0 1 1 1 0 0 0  
  1 1 1 1 1 1 1 1  
  0 0 1 1 1 0 0 0  
  0 1 0 1 0 1 0 0  
  1 0 0 1 0 0 1 0  
  0 0 0 1 0 0 0 1  
  0 0 0 1 0 0 0 0  
                  ┘
#+end_example

This resulted in a more complicated algorithm, so I decided to go for the classical
Wirth implementation:

#+begin_src bqn :tangle ./bqn/rollim.bqn :results none
  NQ ← {𝕊n:
    V‿P ← {⊣𝕏(⊢∾-⋈+)´∘⊢}¨ ⟨∨´⊑¨˜, {1⌾(𝕩⊸⊑)𝕨}¨⟩
    {n≠𝕩 ? +´(𝕨V⊢)◶⟨(𝕩+1)𝕊˜𝕨P⊢,0⟩∘(𝕩⋈⊢)¨ ↕n ; 1
    }˜´ (0⋈0×·↕¨⊢∾·⋈˜+˜)n 
  }
#+end_src

Which nicely compares with the OEIS [[https://oeis.org/A000170][sequence]]:

#+begin_src bqn :tangle ./bqn/rollim.bqn :exports both
  a000170 ← 1‿0‿0‿2‿10‿4‿40‿92
  a000170 ≡ NQ¨ 1+↕8
#+end_src

#+RESULTS:
: 1

And of course, in the implementation above I could have used a single array instead of three,
but I find the resulting validation and position functions very aesthetic the way they are.

** Majority element

The [[https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm][Boyer–Moore]] algorithm allows for finding the majority element (element that appears
more than =⌊𝕩÷2= times in the array) in linear time. If such element exists, then it is
equal to the mode of the data, and for this task we have a nice array [[https://mlochbaum.github.io/bqncrate/?q=mode#][solution]]. The original
implementation could be expressed as:

#+begin_src bqn :tangle ./bqn/rollim.bqn :exports both
  BM ← {v←0 ⋄ I←⊢⊣=◶{𝕊:v+↩1}‿{𝕊:v-↩1} ⋄ 0{𝕊:v=0}◶⟨I,I˜⊣⟩´𝕩}
  BM 6‿1‿3‿1‿3‿3‿4‿3‿3‿5
#+end_src

#+RESULTS:
: 3

The previous fold tracks the majority element as state, a more elegant approach maintains
the number of votes:

#+begin_src bqn :tangle ./bqn/rollim.bqn :exports both
  BM ← {e←@ ⋄ 0{𝕩=0 ? e↩𝕨⋄1 ; 𝕩+¯1⋆e≢𝕨}´𝕩 ⋄ e}
  BM 6‿1‿3‿1‿3‿3‿4‿3‿3‿5
#+end_src

#+RESULTS:
: 3

** An identity on the naturals

Some time ago, while working on performance optimization of linear algebra
operations with Boolean arrays, I encountered an
interesting summation property for an array \(a\) of length \(n\):

\begin{equation*}
    \sum_{i | a_i \neq 0} \sum_{j=i+1}^n f_j
  = \sum_{j=0}^n f_j \sum_{i < j, \, a_i \neq 0}
\end{equation*}

It turns out that the second sum on the RHS can be elegantly transformed
into a scan, giving rise to a beautiful identity that applies to all
natural numbers, not just Booleans as I initially thought:

#+begin_src bqn :tangle ./bqn/rollim.bqn :exports both
  (+`≡·+´/≤⟜<⊒˜) •rand.Range˜ 1e3
#+end_src

#+RESULTS:
: 1

This identity holds because =⊒˜= represents the indices =i= of the list,
and since =+´(/𝕩)=i ←→ i⊑𝕩=, the fold sums all the elements in =𝕩= up to =i=, for
=i= in the range of the length of the list. Ergo, a scan.

** Depth of nested lists

Studying tree algorithms in APL, I learned about the depth vector [[https://asherbhs.github.io/apl-site/trees/representing-trees.html][representation]]. If
our nested structure is in a string, the best approach is using boolean [[https://mlochbaum.github.io/bqncrate/?q=depth%20of%20parens#][masks]]. If we
have a BQN list though, recursion becomes necessary to determine the
depth of nested elements.

#+begin_src bqn :tangle ./bqn/rollim.bqn :exports both
  {=◶⟨⋈0, 1+·∾𝕊¨⟩𝕩} ⟨1, ⟨2, ⟨3⟩, ⟨4, ⟨5, ⟨6, 7⟩⟩⟩⟩, 1⟩
#+end_src

#+RESULTS:
: ⟨ 1 2 3 3 4 5 5 1 ⟩

[fn:1] Almost Perfect Artifacts Improve only in Small Ways: APL is more French than English,
Alan J. Perlis (1978). From [[https://www.jsoftware.com/papers/perlis78.htm][jsoftware]]'s papers collection.
[fn:2] Initially, I intended to attribute all community contributions, but this would
quickly fill the post with footnotes. I often get help from [[https://github.com/mlochbaum][Marshall Lochbaum]] (the BQN creator),
[[https://github.com/dzaima][dzaima]] (the CBQN developer), and other fine folks from the BQN matrix [[https://app.element.io/#/room/%23array:matrix.org][room]].

#+BEGIN_EXPORT html
  <div style="text-align: center; font-size: 2em; padding: 20px 0;">
    <a href="https://panadestein.github.io/blog/" style="text-decoration: none;">⊑∘∞</a>
  </div>
#+END_EXPORT
