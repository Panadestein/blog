#+TITLE: A coding impromptu 
#+INCLUDE: "../html-head.org"
#+HTML_HEAD: <style>
#+HTML_HEAD:   #table-of-contents > h2 { display: none; } /* Hide the default TOC heading */
#+HTML_HEAD:   #table-of-contents > ul { display: block; } /* Ensure TOC content is shown */
#+HTML_HEAD: </style>

This post is a rolling collection of algorithms and computational ideas I like, implemented in BQN.
The current selection includes:

#+TOC: headlines 2 :ignore-title t

The categories above are more hints than strict taxonomies. Occasionally, an entry here grows enough to deserve
its own dedicated post, leaving behind only a link or a memory. Extrapolating Perlis' remark[fn:1], it's likely
that a group of 50 individuals would devise 35 to 40 distinct solutions to even the simplest problem in BQN.
Therefore, I will sometimes juxtapose my implementations with those of seasoned /BQNators/[fn:2].

** Competitive programming

Problems I find in coding challenges' platforms, such as [[https://leetcode.com/u/panadestein/][LeetCode]], [[https://cses.fi/problemset/][CSES]], and [[https://cp-algorithms.com/][cp-algorithms]].

*** Trapping rain water

This is a classical interview [[https://leetcode.com/problems/trapping-rain-water/][problem]] that can be solved in linear time. Interestingly,
it admits a very elegant array solution:

#+begin_src bqn :tangle ../bqn/rollim.bqn :exports both
  (+´⊢-˜⌈`⌾⌽⌊⌈`) [0,1,0,2,1,0,1,3,2,1,2,1]
#+end_src

#+RESULTS:
: 6

That is, we take the minimum of max-scans from the left and from the right, and subtract the corresponding height.
Reducing the resulting array gives the amount of trapped water.

A closely related problem is [[https://leetcode.com/problems/container-with-most-water/][container with most water]], which unfortunately is not so easy to solve in linear
time using an array approach (one can easily implement the imperative two pointers solution in BQN, but it
will probably be slow). Here are two solutions, one \(O(n^2)\) and the other \(O(n\log n)\), both tacit:

#+begin_src bqn :tangle ../bqn/rollim.bqn :exports both
  ⟨⌈´∘⥊⌊⌜˜×·-⌜˜⊒˜, ⌈´∨×(⌈`⊸-⌈⊢-⌊`)∘⍒⟩ {10 𝕎•_timed𝕩}¨< •rand.Range˜1e4
#+end_src

#+RESULTS:
: ⟨ 0.080050875 4.14558e¯5 ⟩

*** Z algorithm

This is a very efficient procedure that finds prefix strings in [[https://cp-algorithms.com/string/z-function.html][linear time]]. The imperative
implementation reads:

#+begin_src bqn :tangle ../bqn/rollim.bqn :exports both
  ZI ← {𝕊s:
    l‿r‿z ← 0⚇0 0‿0‿s
    z ⊣ {
      v ← r(⊢1⊸+•_while_{(𝕩+𝕨)<≠s ? =´⟨𝕩,𝕩+𝕨⟩⊑¨<s ; 0}<◶({z⊑˜𝕩-l}⌊-+1)‿0)𝕩
      r <◶@‿{𝕊: l↩𝕩-v+1 ⋄ r↩𝕩} 𝕩+v-1
      z v⌾(𝕩⊸⊑)↩
    }¨ ↕≠s
  }
  ZI "abacabadabacaba"
#+end_src

#+RESULTS:
: ⟨ 15 0 1 0 3 0 1 0 7 0 1 0 3 0 1 ⟩

Two algorithmic improvements can be made here, namely only iterate
over indices where the character found is equal to the first character, and only search
to extend the count if it goes up to the end of r:

#+begin_src bqn :tangle ../bqn/rollim.bqn :exports both
  ZFun ← {𝕊s:
    CountEq ← { 1⊸+•_while_((≠𝕨)⊸≤◶⟨⊑⟜𝕨≡⊑⟜𝕩,0⟩) 0 }
    l←r←0 ⋄ Ulr ← {(r⌈↩𝕨+𝕩)>r ? l↩𝕨 ⋄ 𝕩; 𝕩}
    SearchEq ← ⊣ Ulr ⊢ + + CountEq○(↓⟜s) ⊢
    Set ← {i𝕊𝕩: ((r-i) (i SearchEq 0⌈⊣)⍟≤ (i-l)⊑𝕩)⌾(i⊸⊑) 𝕩 }
    (⌽1↓/⊑⊸=s) Set´˜ ↑˜≠s
  }
#+end_src

I came up with two array versions, with quadratic and cubic time complexities respectively:

#+begin_src bqn :tangle ../bqn/rollim.bqn :exports both
  ZAQ ← ¯1↓↓(+´·∧`⊣=≠⊸↑)¨<
  ZAC ← (+´∧`)¨<=↕∘≠{«⍟𝕨𝕩}⌜<
  (ZAQ≡ZAC)◶@‿ZAC "abacabadabacaba"
#+end_src

#+RESULTS:
: ⟨ 15 0 1 0 3 0 1 0 7 0 1 0 3 0 1 ⟩

With further refinements, the earlier solutions can be transformed into:

#+begin_src bqn :tangle ../bqn/rollim.bqn
  ZAQ‿ZAC ← {(+´∧`)¨𝕏}¨ ⟨≠↑↓=⌽∘↑, <=«⍟(↕∘≠)⟩
#+end_src

*** Longest increasing sub-sequence

This [[https://en.wikipedia.org/wiki/Longest_increasing_subsequence][problem]] can be solved in \(O(n\log n)\) using dynamic programming. Here is an
imperative implementation which is quadratic, but can be optimized:

#+begin_src bqn :tangle ../bqn/rollim.bqn :exports both
  LISI ← {
    k‿dp ← ¯1‿(∞¨𝕩)
    {i ← ∧´◶(⊑⊐⟜0)‿{𝕊:k+↩1} dp<𝕩 ⋄ dp 𝕩⌾(i⊸⊑)↩}¨ 𝕩
    +´∞>dp
  }
  LISI¨ ⟨0‿1‿0‿3‿2‿3, 10‿9‿2‿5‿3‿7‿101‿18, 7‿7‿7‿7‿7⟩
#+end_src

#+RESULTS:
: ⟨ 4 4 1 ⟩

A more elegant array solution is:

#+begin_src bqn :tangle ../bqn/rollim.bqn :exports both
  LISA ← +´∞≠∞¨{𝕨⌾((⊑𝕩⍋𝕨-1)⊸⊑)𝕩}´⌽
  LISA¨ ⟨0‿1‿0‿3‿2‿3, 10‿9‿2‿5‿3‿7‿101‿18, 7‿7‿7‿7‿7⟩
#+end_src

#+RESULTS:
: ⟨ 4 4 1 ⟩

Let's =)explain= this optimized version, so we can truly appreciate its beauty:

#+begin_src bqn :exports results
  )explain +´∞≠∞¨{𝕨⌾((⊑𝕩⍋𝕨-1)⊸⊑)𝕩}´⌽
#+end_src

#+RESULTS:
#+begin_example
 +´∞≠∞¨{𝕨⌾((⊑𝕩⍋𝕨-1)⊸⊑)𝕩}´⌽ 
 │ │ │ ││    │ │ │  │ │  │ 
 │ │ │ {┼────┼─┼─┼──┼─┼─´│ 
 │ │ ∞¨ │    │ │ │  │ │ ││ 
 │ │  └─┼────┼─┼─┼──┼─┼─┼⌽ 
 │ ∞≠───┼────┼─┼─┼──┼─┼─┘  
 +´ │   │    │ │ │  │ │    
  └─┘   │    │ │ │  │ │    
        │    │ 𝕨-1  │ │    
        │    𝕩⍋─┘   │ │    
        │   ⊑─┘     │ │    
        │   └──────⊸⊑ │    
        𝕨⌾─────────┘  │    
         ├────────────𝕩    
╶────────┘
#+end_example

The full expression is structured as a two-train: we sum all finite entries from the
result of the rightmost three-train. The three-train is a right fold over the reversed
input, with an initial array of =∞= and the same length as the input. In each step
of the fold, we modify the right argument using under: we perform a binary search
with strict comparison to find where the next element should go.
The element is either placed at the end of the unfilled region, or it replaces
the first element that is greater than =𝕨=. Since BQN uses a based array model,
we pick the enclosed atom from this operation's result. So it goes[fn:3].

*** N-queens problem

This problem is the archetypal example of backtracking. Initially, I tried to solve it
using a function to place the queens in the full board, hoping that it would lead to a
more array oriented solution:

#+begin_src bqn :tangle ../bqn/rollim.bqn :exports both
  8 {((∨⌜´0⊸=)∨(0=-⌜´)∨0=+⌜´) 𝕩-¨<↕𝕨} 2‿3
#+end_src

#+RESULTS:
#+begin_example
┌─                 
╵ 0 1 0 1 0 1 0 0  
  0 0 1 1 1 0 0 0  
  1 1 1 1 1 1 1 1  
  0 0 1 1 1 0 0 0  
  0 1 0 1 0 1 0 0  
  1 0 0 1 0 0 1 0  
  0 0 0 1 0 0 0 1  
  0 0 0 1 0 0 0 0  
                  ┘
#+end_example

This resulted in a more complicated algorithm, so I decided to go for the classical
Wirth implementation:

#+begin_src bqn :tangle ../bqn/rollim.bqn :results none
  NQ ← {𝕊n:
    V‿P ← {⊣𝕏(⊢∾-⋈+)´∘⊢}¨ ⟨∨´⊑¨˜, {1⌾(𝕩⊸⊑)𝕨}¨⟩
    {n≠𝕩 ? +´(𝕨V⊢)◶⟨(𝕩+1)𝕊˜𝕨P⊢,0⟩∘(𝕩⋈⊢)¨ ↕n ; 1
    }˜´ (0⋈0×·↕¨⊢∾·⋈˜+˜)n 
  }
#+end_src

Which nicely compares with the OEIS [[https://oeis.org/A000170][sequence]]:

#+begin_src bqn :tangle ../bqn/rollim.bqn :exports both
  a000170 ← 1‿0‿0‿2‿10‿4‿40‿92
  a000170 ≡ NQ¨ 1+↕8
#+end_src

#+RESULTS:
: 1

And of course, in the implementation above I could have used a single array instead of three,
but I find the resulting validation and position functions very aesthetic the way they are.

*** Majority element

The [[https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm][Boyer–Moore]] algorithm allows for finding the majority element (element that appears
more than =⌊𝕩÷2= times in the array) in linear time. If such element exists, then it is
equal to the mode of the data, and for this task we have a nice array [[https://mlochbaum.github.io/bqncrate/?q=mode#][solution]]. The original
implementation could be expressed as:

#+begin_src bqn :tangle ../bqn/rollim.bqn :exports both
  BM ← {v←0 ⋄ I←⊢⊣=◶{𝕊:v+↩1}‿{𝕊:v-↩1} ⋄ 0{𝕊:v=0}◶⟨I,I˜⊣⟩´𝕩}
  BM 6‿1‿3‿1‿3‿3‿4‿3‿3‿5
#+end_src

#+RESULTS:
: 3

The previous fold tracks the majority element as state, a more elegant approach maintains
the number of votes:

#+begin_src bqn :tangle ../bqn/rollim.bqn :exports both
  BM ← {e←@ ⋄ 0{𝕩=0 ? e↩𝕨⋄1 ; 𝕩+¯1⋆e≢𝕨}´𝕩 ⋄ e}
  BM 6‿1‿3‿1‿3‿3‿4‿3‿3‿5
#+end_src

#+RESULTS:
: 3


*** H-index

This metric is one of the reasons for the [[https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2407748][deplorable]] state of modern academia,
and the headaches for /outsiders/ trying to get in. Consider that Peter Higgs
has an estimated h-index of only [[https://www.semanticscholar.org/author/P.-W.-Higgs/50750305][12]]. By contrast, a random professor nowadays 
boasts an h-index ten times as high, and exponentially less impact.
Enough of ranting, let's concentrate on finding an elegant way to
implement this useless thing:

#+begin_src bqn :tangle ../bqn/rollim.bqn :exports both
  HL ← (+´∘«⊒˜≤+`⌾⌽)·/⁼≠⊸⌊
  HS ← +´∨≥1+⊒˜
  (HL≡HS)◶@‿HL 14‿14‿11‿9‿5‿5‿1‿1‿1‿1‿0
#+end_src

#+RESULTS:
: 5

If someone ever published that much, sorting will eventually be slower:

#+begin_src bqn :tangle ../bqn/rollim.bqn :exports both
  HL‿HS {𝕎•_timed𝕩}¨< 1e8 •rand.Range 1e3
#+end_src

#+RESULTS:
: ⟨ 0.083824959 0.21801262700000001 ⟩

A testament to the idea that the simplest solution in BQN is often the most efficient:
I initially clip my citations array with ={≠¨⊔≠∘𝕩¨⌾(≥⟜≠∘𝕩⊸/)𝕩}=, which is just =/⁼≠⊸⌊=.

** Numerical methods

I love numerical analysis. Compact implementations are often helpful to get the big picture.

*** Solving the cubic equation

This function computes the real roots of an arbitrary [[https://en.wikipedia.org/wiki/Cubic_equation][cubic equation]]. Initially,
the equation is transformed into its depressed form via an appropriate substitution.
Depending on the sign of the discriminant, the roots are then determined using Cardano's
method when the discriminant is positive, or Viète’s trigonometric method when it is negative.
In the case where the discriminant is zero, the proportionality to the square
of the Vandermonde polynomial implies that a repeated root is present, the roots
are resolved through direct analytical methods. We have chosen those methods to avoid
using complex numbers, which are not yet supported in BQN.

#+begin_src bqn :tangle ../bqn/rollim.bqn
  Cub ← {a‿b‿c‿d:
    (b÷3×a)-˜•math{
      𝕩>0 ? +´𝕩(𝕗.Cbrt+⋈-)⟜√˜-q÷2;
      𝕩=0 ? 0⊸=◶⟨¯1‿2‿2÷˜·𝕗.Cbrt×⟜4,3⊸⥊⟩q;
      (2×√-p÷3)×𝕗.Cos(2×π×↕⊸÷3)-˜3÷˜𝕗.Acos(√-3÷p)×1.5×q÷p
    }(27÷˜p⋆3)+4÷˜×˜q←(d÷a)-(27÷˜3⋆˜b÷a)+3÷˜b×a÷˜p←(c÷a)-3÷˜×˜b÷a
  }
#+end_src

#+RESULTS:
: (function block)

The above implementation only works for the case where =a≢0=, it will yield =NaN= otherwise.
Here are some tests for the four possible branches:

#+begin_src bqn :tangle ../bqn/rollim.bqn :exports both
  Cub¨ ⟨1‿0‿¯7‿6, 1‿¯1‿¯8‿12, 1‿¯6‿12‿¯8, 1‿3‿0‿¯1⟩ 
#+end_src

#+RESULTS:
: ⟨ ⟨ 2.0000000000000004 1 ¯3.0000000000000004 ⟩ ⟨ ¯2.9999999999999996 1.9999999999999998 1.9999999999999998 ⟩ ⟨ 2 2 2 ⟩ ⟨ 0.532088886237956 ¯0.6527036446661387 ¯2.879385241571817 ⟩ ⟩

*** QR decomposition

I put some effort golfing this [[https://en.wikipedia.org/wiki/QR_decomposition][QR decomposition]] implementation, and I got a very satisfying
98 chars [[https://codegolf.stackexchange.com/a/278570/94421][one-liner]]. Ungolfed a bit, it looks like this:

#+begin_src bqn :tangle ../bqn/rollim.bqn
  QR ← +˝∘×⎉1‿∞{
    1=⊢´≢𝕩 ? 𝕩⊸÷⟜⊑⊸⋈√+˝×˜𝕩;
    ∾˘{(q𝔽𝕨)⋈(r𝔽t)∾0𝔽⍟k𝕩}´𝕊𝔽{𝕘-𝕩𝔽t↩𝕩⍉⊸𝔽𝕘}(k↓˘𝕩)⊑q‿r←𝕊𝕩↑˘˜k←⌈2÷˜⊢´≢𝕩⊣t←@
  }
#+end_src

#+RESULTS:
: +˝∘×⎉⟨ 1 ∞ ⟩(1-modifier block)

The function works like this: it recursively computes the QR decomposition of a matrix by first
handling the base case (normalizing a single column) then splitting the matrix into two halves.
The first half is decomposed into \(Q_0\) and \(R_0\), and the second half is orthogonalized
against \(Q_0\) by subtracting its projection, yielding a residual matrix that is itself
decomposed into \(Q_1\) and \(R_1\). Finally, the overall orthogonal matrix \(Q\) is formed
by horizontally concatenating \(Q_0\) and \(Q_1\), and the upper triangular \(R\) is assembled
as a block matrix combining \(R_0\), the projection coefficients, and \(R_1\):

\begin{equation*}
  Q \, R = \begin{pmatrix} Q_0 & Q_1 \end{pmatrix} \begin{pmatrix} R_0 & T \\ 0 & R_1 \end{pmatrix} = Q_0 R_0 + Q_0 T + Q_1 R_1,
\end{equation*}

We can test it with random matrices:

#+begin_src bqn :tangle ../bqn/rollim.bqn :exports both
  (⊢∾⟜<m-+˝∘×⎉1‿∞´) QR m ← 3‿3•rand.Range 0
#+end_src

#+RESULTS:
: ┌─                                                                                                                                        
: · ┌─                                                             ┌─                                                            ┌─         
:   ╵  0.8157427013276365 ¯0.577946856084976 0.02326535562123689   ╵ 0.9106163258394209 0.7411115590785274  0.7652096291273813   ╵ 0 0 0    
:     0.32843727859545113 0.4297133155667652 ¯0.8411155809122974                      0  0.709988720748101 0.15322713799622295     0 0 0    
:       0.476122672490509 0.6937751061879561  0.5403547934222346                      0                  0 0.36577814222564664     0 0 0    
:                                                                ┘                                                             ┘         ┘  
:                                                                                                                                          ┘

*** Fast Fourier Transform

Below is an implementation of the radix-2 [[https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm][Cooley–Tukey FFT algorithm]]. The function leverages
BQN's headers to define the inverse transform in a succinct way using the property:

\begin{equation*}
  \text{iFFT}[\mathbf{x}] = \frac{1}{N}\text{FFT}^{*}[\mathbf{x}^{*}]
\end{equation*}

We also define a namespace for dealing with complex numbers, in particular the =Cis= function:

#+begin_src bqn :tangle ../bqn/rollim.bqn :exports code
  z ← {
    _p ⇐ {(-´𝔽¨)⋈(+´𝔽¨)⟜⌽}
    C‿E ⇐ ⟨⋈⟜-´˘, •math{𝕗.Cos≍˘𝕗.Sin}⟩
  }
  FFT ← {𝕊⁼: z.C{≠÷˜·𝔽𝔾∘𝔽}𝕊𝕩; (1=≠)◶⟨(+∾-)⟜(⊢×z._p˘·z.E∘-π×↕⊸÷∘≠)´(𝕊¨⊢⊔˜2|⊒˜), ⊢⟩𝕩}
#+end_src

#+RESULTS:
: (function block)

Let's confirm that the inverse returns back the original list:

#+begin_src bqn :tangle ../bqn/rollim.bqn :exports both
  (+´∘⥊⊢-FFT⁼∘FFT) 0•rand.Range˜2⋈˜2⋆10
#+end_src

#+RESULTS:
: 1.914614300435602e¯14

We could also compare with the discrete Fourier transform, which despite being \(O(N^2)\)
+has+ should have a nice array formulation:

#+begin_src bqn :tangle ../bqn/rollim.bqn :exports both
  DFT ← ≍˘´<˘{𝔽∘⍉+˝∘×⎉1‿∞ z._p˜·𝔽1‿0⍉⁼·z.E ¯2×π×≠÷˜·×⌜˜⊒˜}
  (+´∘⥊FFT-DFT) 0•rand.Range˜2⋈˜2⋆10
#+end_src

#+RESULTS:
: ¯2.8412011632283907e¯10

In the DFT code above, I got into a big mess with the complex numbers, because the
=z= namespace was too tightly coupled with the FFT implementation. I had to do a
bunch of enclosing and coupling to get the same shape. With proper complex numbers
support it would be something like:

#+begin_src bqn :tangle ../bqn/rollim.bqn
  DFT ← ⊢+˝∘×⎉1‿∞˜·⋆¯2×π×≠÷˜·×⌜˜⊒˜
#+end_src

*** Tensor n-mode product

The n-mode product is a key ingredient for computing the Tucker decomposition of a tensor.
For this we can use the [[https://en.wikipedia.org/wiki/Higher-order_singular_value_decomposition][HOSVD]] algorithm: a method that has been rediscovered several times.
For example, in the nuclear quantum dynamics community it is known as =POTFIT= and
was published before the often cited De Lathauwer paper, see [[https://arxiv.org/abs/1309.5060][arXiv:1309.5060]] for a discussion.
For a tensor \(\mathcal{X}\) and a matrix \(U\) we define:

\begin{equation*}
  (\mathcal{X} \times_n U)_{i_1,\dots,i_{n-1},\,j,\,i_{n+1},\dots,i_N} = \sum_{i_n=1}^{I_n} x_{i_1,\dots,i_n,\dots,i_N}\, u_{j,i_n}.
\end{equation*}

In BQN's parlance, we can express it as:

#+begin_src bqn :tangle ../bqn/rollim.bqn
  {+˝∘×⎉1‿∞⟜𝕩⌾(⍉⍟𝕗)𝕨}
#+end_src

A beautiful example of notation as a tool of thought, in my opinion: this deferred 1-modifier
(itself a compact melange of six modifiers) computes the 𝕗-mode product of a tensor 𝕨 and a matrix 𝕩.
It works by moving the 𝕗-axis to the front, then multiplying 𝕨 and 𝕩 without the need for explicit
unfolding, courtesy of the rank operator, and moving the last axis of the result back to 𝕗, all
gracefully managed by under.

** Array programming

Here are some tricks and I ideas I find useful in array programming, many of them born from some REPL exploration.

*** An identity on the naturals

Some time ago, while working on performance optimization of linear algebra
operations with Boolean arrays, I encountered an
interesting summation property for an array \(a\) of length \(n\):

\begin{equation*}
    \sum_{i | a_i \neq 0} \sum_{j=i+1} f_j
  = \sum_{j=0} f_j \sum_{i < j | a_i \neq 0} 1
\end{equation*}

It turns out that the RHS can be elegantly transformed
into a scan, giving rise to a beautiful identity that applies to all
natural numbers, not just Booleans as I initially thought:

#+begin_src bqn :tangle ../bqn/rollim.bqn :exports both
  (+`≡·+´/≤⟜<⊒˜) •rand.Range˜ 1e3
#+end_src

#+RESULTS:
: 1

This identity holds because =⊒˜= represents the indices =i= of the list,
and since =+´(/𝕩)=i ←→ i⊑𝕩=, the fold sums all the elements in =𝕩= up to =i=, for
=i= in the range of the length of the list. Ergo, a scan.

*** Depth of nested lists

Studying tree algorithms in APL, I learned about the depth vector [[https://asherbhs.github.io/apl-site/trees/representing-trees.html][representation]]. If
the nested object in consideration is a string, the best approach is using boolean [[https://mlochbaum.github.io/bqncrate/?q=depth%20of%20parens#][masks]].
However, when dealing with a BQN list, recursion becomes necessary to determine
the depth of nested elements. Here’s how it can be implemented:

#+begin_src bqn :tangle ../bqn/rollim.bqn :exports both
  {=◶⟨⋈0, 1+·∾𝕊¨⟩𝕩} ⟨1, ⟨2, ⟨3⟩, ⟨4, ⟨5, ⟨6, 7⟩⟩⟩⟩, 1⟩
#+end_src

#+RESULTS:
: ⟨ 1 2 3 3 4 5 5 1 ⟩

[fn:1] Almost Perfect Artifacts Improve only in Small Ways: APL is more French than English,
Alan J. Perlis (1978). From [[https://www.jsoftware.com/papers/perlis78.htm][jsoftware]]'s papers collection.
[fn:2] Initially, I intended to rigorously attribute all contributions, but this
quickly filled the text with footnotes. I often get help streamlining my solutions
from [[https://github.com/mlochbaum][Marshall Lochbaum]] (the BQN creator), [[https://github.com/dzaima][dzaima]] (the CBQN developer),
and other fine folks from the BQN matrix [[https://app.element.io/#/room/%23array:matrix.org][room]], thank you all! Please check the [[https://github.com/dzaima/chatlogs][logs]] for more context.
[fn:3] Don’t believe me? Just ask Kilgore Trout!

#+INCLUDE: "../html-foot.org"
