#+TITLE: Climbing Mount Euler
#+INCLUDE: "../html-head.org"
#+PROPERTY: header-args :tangle ../bqn/pe.bqn
#+HTML_HEAD: <style>
#+HTML_HEAD:   #table-of-contents > h2 { display: none; }
#+HTML_HEAD:   #text-table-of-contents > ul { 
#+HTML_HEAD:     display: grid;
#+HTML_HEAD:     grid-template-columns: repeat(8, 1fr);
#+HTML_HEAD:     gap: 10px;
#+HTML_HEAD:     list-style: none;
#+HTML_HEAD:     padding: 0;
#+HTML_HEAD:     margin: 0;
#+HTML_HEAD:   }
#+HTML_HEAD:   #table-of-contents > ul > li {
#+HTML_HEAD:     text-align: center;
#+HTML_HEAD:   }
#+HTML_HEAD: </style>

#+TOC: headlines 1 :ignore-title t

** Foreword
:PROPERTIES:
:UNNUMBERED: notoc
:END:

This post presents my BQN solutions to some of the problems in [[https://projecteuler.net/][Project Euler]].
It is discouraged to share them, but I very much dislike writing throw-away code,
and that's why they are here[fn:1]. First I will solve problems in order, and then I will
probably pick the ones that I find interesting. This is my profile, if you want to
see my progress:

#+begin_export html
  <a href="https://projecteuler.net/profile/panadestein.png" target="_blank">
    <img src="https://projecteuler.net/profile/panadestein.png" alt="My Project Euler Profile" style="border: 0;">
  </a>
#+end_export

Let's start by defining some utilities that will be shared by several problems:

#+begin_src bqn
  utils ‚Üê {
    Sieve ‚áê 2‚ä∏‚Üì{
      L ‚Üê ùîΩ{0¬®‚åæ((ùï®√óùîΩ/(‚åàùï®√∑Àú‚â†)‚ä∏‚Üëùï©)‚ä∏‚äè)ùï©}
      M ‚Üê ‚ä¢>√óÀú‚àò‚ä£‚ä∏‚•ä‚üú0¬ª‚â†‚àò‚ä¢‚•ä‚Üë‚üú1
      ùîΩ/(ùï©‚•ä1)‚â§‚üú20‚ó∂L‚ÄøM‚çü‚äë¬¥‚åΩùîΩ‚Üï‚åà‚àöùï©
    }
    Rosser ‚áê ‚åà‚ãÜ‚Åº{ùîΩ‚àòùîΩ‚ä∏+‚üúùîΩ‚ä∏√ó}
    Tau ‚áê {2+¬¥(2‚ä∏√ó-‚ä¢√ó‚ä£=√∑Àú‚üúùï©)‚üú(0=|‚üúùï©)2‚Üì‚Üï1+‚åä‚àöùï©}
    Sigma ‚áê {+¬¥1‚àæùï©‚ä∏√∑‚ä∏‚àæ(0=|‚üúùï©)‚ä∏/2‚Üì‚Üï1+‚åä‚àöùï©}
  }
  parsing ‚Üê {
    Split ‚áê (¬¨-Àú‚ä¢√ó¬∑+`¬ª‚ä∏>)‚àò‚â†‚äî‚ä¢
  }
#+end_src

#+RESULTS:
: {split‚áê}

** Problem 1
:PROPERTIES:
:ALT_TITLE: 1
:END:

#+begin_src bqn
  E1 ‚Üê +¬¥(‚à®¬¥0=5‚Äø3|<)‚ä∏/
#+end_src

#+RESULTS:
: +¬¥(‚à®¬¥0=‚ü® 5 3 ‚ü©|<)‚ä∏/

#+begin_src bqn :tangle no :exports none
  E1 ‚Üï1e3
#+end_src

#+RESULTS:
: 233168

** Problem 2
:PROPERTIES:
:ALT_TITLE: 2
:END:

Estimate the upper bound with Binet's formula.

#+begin_src bqn
  E2 ‚Üê {+¬¥(¬¨2‚ä∏|)‚ä∏/{‚äë¬®+`‚àò‚åΩ‚çü(‚Üïùï©)‚Üï2}(‚åà0.5+ùï©‚ä∏√ó√∑‚óã(‚ãÜ‚Åº)2√∑Àú1‚ä∏+)‚àö5}
#+end_src

#+RESULTS:
: (function block)

#+begin_src bqn :tangle no :exports none
  E2 4e6
#+end_src

#+RESULTS:
: 4613732

** Problem 3
:PROPERTIES:
:ALT_TITLE: 3
:END:

A brute force attempt, in which I got lucky. We create a primes table, and then check:

#+begin_src bqn :tangle no
  p ‚Üê ¬¨‚àò‚àä‚üú(‚•ä√ó‚åúÀú)‚ä∏/2‚Üì‚Üï1e4
  {ùï©=√ó¬¥f‚Üêp/Àú0=p|<ùï© ? ‚åà¬¥f; @}600851475143
#+end_src

#+RESULTS:
: 6857

Provided the size of the input, a much reasonable approach is trial division. We can
achieve this with the following tacit function:

#+begin_src bqn
  E3 ‚Üê ‚ä¢¬¥(0=|)‚ó∂‚ü®+‚üú2‚ä∏‚ãà, ‚ä£‚ãà√∑Àú‚ü©¬¥‚Ä¢_while_(√óÀú‚ä∏<¬¥)
#+end_src

#+RESULTS:
: ‚ä¢¬¥(0=|)‚ó∂‚ü® +‚üú2‚ä∏‚ãà ‚ä£‚ãà√∑Àú ‚ü©¬¥‚Ä¢_while_(√óÀú‚àò‚ä£‚ä∏<¬¥)

#+begin_src bqn :tangle no :exports none
  E3 3‚Äø600851475143 
#+end_src

#+RESULTS:
: 6857

Explanation: since the number is odd, we can start with 3. While the current
divisor is less than the square root of the current number, we check if it
divides the number. If it does, we divide the number by the divisor.
If it doesn't, we increment the divisor by 2 (to consider only odd factors).
This works because a composite number must have a prime factor less
than or equal to its square root.

** Problem 4
:PROPERTIES:
:ALT_TITLE: 4
:END:

Anything other than brute force here? A little tacit function:

#+begin_src bqn
  E4 ‚Üê ‚åà¬¥¬∑(‚åΩ‚ä∏‚â°‚Ä¢Fmt)¬®‚ä∏/¬∑‚•ä√ó‚åúÀú
#+end_src

#+RESULTS:
: ‚åà¬¥((‚åΩ‚ä∏‚â°‚Ä¢Fmt)¬®‚ä∏/(‚•ä√ó‚åúÀú))

#+begin_src bqn :tangle no :exports none
  E4 900+‚Üï101
#+end_src

#+RESULTS:
: 906609

This runs in 5 ms with the optimization of searching only in the 900's.

** Problem 5
:PROPERTIES:
:ALT_TITLE: 5
:END:

That felt almost trivial.

#+begin_src bqn
  E5 ‚Üê ‚Ä¢math.LCM¬¥
#+end_src

#+RESULTS:
: ‚Ä¢math.LCM¬¥

#+begin_src bqn :tangle no :exports none
  E5 1+‚Üï20
#+end_src

#+RESULTS:
: 232792560

** Problem 6
:PROPERTIES:
:ALT_TITLE: 6
:END:

Yeah well, what can I say, I love this identity:

#+begin_src bqn
  E6 ‚Üê √óÀú‚ä∏(+¬¥√ó-‚ä£)
#+end_src

#+RESULTS:
: √óÀú‚ä∏(+¬¥√ó-‚ä£)

#+begin_src bqn :tangle no :exports none
  E6 1+‚Üï100
#+end_src

#+RESULTS:
: 25164150

In fact, I was terribly stupid. There are closed form solutions for the sum
of the first \(n\) integers and its squares (remember induction?). So after
squaring the former, subtracting the latter and simplifying we get this constant
time solution:

#+begin_src bqn :tangle no
  12√∑Àú√ó¬¥‚ü®‚ä¢, -‚üú1, +‚üú1, 2+3‚ä∏√ó‚ü©{ùïéùï©}¬®100
#+end_src

#+RESULTS:
: 25164150

Quite a few characters more, though.


** Problem 7
:PROPERTIES:
:ALT_TITLE: 7
:END:

The idea here is to use Eratosthenes' sieve with a correct upper bound, which we get
thanks to Rosser's [[https://en.wikipedia.org/wiki/Prime-counting_function#Inequalities][theorem]]:

#+begin_src bqn
  E7 ‚Üê -‚üú1‚äëutils{ùïó.Sieveùïó.Rosser}
#+end_src

#+RESULTS:
: -‚üú1‚äë(2‚ä∏‚Üì(1-modifier block)(‚åà‚ãÜ‚Åº‚àò(‚ãÜ‚Åº)‚ä∏+‚üú(‚ãÜ‚Åº)‚ä∏√ó))

#+begin_src bqn :tangle no :exports none
  E7 1e4+1
#+end_src

#+RESULTS:
: 104743

** Problem 8
:PROPERTIES:
:ALT_TITLE: 8
:END:

A simple windowed reduction:

#+begin_src bqn
  E8 ‚Üê ‚åà¬¥¬∑(√ó¬¥‚ä¢-@+48Àô)Àò13‚ä∏‚Üï
#+end_src

#+RESULTS:
: ‚åà¬¥((√ó¬¥‚ä¢-@+48Àô)Àò13‚ä∏‚Üï)

#+begin_src bqn :tangle no :exports none
  E8 "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
#+end_src

#+RESULTS:
: 23514624000

** Problem 9
:PROPERTIES:
:ALT_TITLE: 9
:END:

A stupid brute force does the trick:

#+begin_src bqn :tangle no
  {‚äë(√ó√ó+‚åæ(√óÀú))¬¥¬®1+/‚óã‚•ä‚üú(‚Üï‚â¢)(<‚åúÀú‚Üï‚â†ùï©)√ó(1e3=+++‚åæ(√óÀú))‚åúÀúùï©} 1+‚Üï1e3
#+end_src

#+RESULTS:
: 31875000

But I hate it and it is painfully slow. The correct way of doing it is using [[https://en.wikipedia.org/wiki/Pythagorean_triple#Proof_of_Euclid's_formula][Euclid's formula]].

#+begin_src bqn
  E9 ‚Üê {‚ãÜ‚üú4{2√ó√ó√óùîΩÀú-ùîΩ}¬¥¬®1+/‚óã‚•ä‚üú(‚Üï‚â¢)‚åä‚ä∏=ùï©√∑Àú(‚ä¢√ó+)‚åú‚óã(1+‚Üï)Àú‚åà‚àöùï©}
#+end_src

#+RESULTS:
: (function block)

Here we have used the fact that the sum of the triplet expressed with Euclid's formula
must be \(km(m+n)=500\), with \(m>n>1\) coprime and one of them odd. It suffices to loop
until ‚àö500 because \(m\) cannot be larger than it, as \(n\) is positive.

#+begin_src bqn :tangle no :exports none
  ‚äëE9 500
#+end_src

#+RESULTS:
: 31875000

** Problem 10
:PROPERTIES:
:ALT_TITLE: 10
:END:

The sieve again:

#+begin_src bqn
  E10 ‚Üê +¬¥utils.Sieve
#+end_src

#+RESULTS:
: +¬¥2‚ä∏‚Üì(1-modifier block)

#+begin_src bqn :tangle no :exports none
  E10 2e6
#+end_src

#+RESULTS:
: 142913828922

** Problem 11
:PROPERTIES:
:ALT_TITLE: 11
:END:

This has to be brute force. First, I will parse the grid:

#+begin_src bqn :tangle no
  inp11 ‚Üê ‚àò‚Äø20‚•ä‚Ä¢ParseFloat¬®' 'parsing.Split"08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"
#+end_src

#+RESULTS:
#+begin_example
‚îå‚îÄ                                                             
‚ïµ  8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 12 50 77 91  8  
  49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48  4 56 62  0  
  81 49 31 73 55 79 14 29 93 71 40 67 53 88 30  3 49 13 36 65  
  52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 71 37  2 36 91  
  22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80  
  24 47 32 60 99  3 45  2 44 75 33 53 78 36 84 20 35 17 12 50  
  32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70  
  67 26 20 68  2 62 12 20 95 63 94 39 63  8 40 91 66 49 94 21  
  24 55 58  5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72  
  21 36 23  9 75  0 76 44 20 45 35 14  0 61 33 97 34 31 33 95  
  78 17 53 28 22 75 31 67 15 94  3 80  4 62 16 14  9 53 56 92  
  16 39  5 42 96 35 31 47 55 58 88 24  0 17 54 24 36 29 85 57  
  86 56  0 48 35 71 89  7  5 44 44 37 44 60 21 58 51 54 17 58  
  19 80 81 68  5 94 47 69 28 73 92 13 86 52 17 77  4 89 55 40  
   4 52  8 83 97 35 99 16  7 97 57 32 16 26 26 79 33 27 98 66  
  88 36 68 87 57 62 20 72  3 46 33 67 46 55 12 32 63 93 53 69  
   4 42 16 73 38 25 39 11 24 94 72 18  8 46 29 32 40 62 76 36  
  20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74  4 36 16  
  20 73 35 29 78 31 90  1 74 31 49 71 48 86 81 16 23 57  5 54  
   1 70 54 71 83 51 54 69 16 92 33 48 61 43 52  1 89 19 67 48  
                                                              ‚îò
#+end_example

Then we have this hideous thing:

#+begin_src bqn
  E11 ‚Üê {‚åà¬¥‚àæ(√óÀùÀò4‚ä∏‚Üï)¬®(4‚â§‚â†)¬®‚ä∏/((‚åΩ++¬¥‚àò‚â¢)‚ä∏‚àæ¬∑+‚åú¬¥‚Üï¬®‚àò‚â¢)‚ä∏‚äî‚üú(‚àæÀú)ùï©}‚åà(‚åà¬¥‚àò‚•ä¬∑√óÀùÀò4‚ä∏‚Üï){ùîΩ‚åàùîΩ‚àò‚çâ}
#+end_src

#+RESULTS:
: (function block)‚åà(‚åà¬¥‚àò‚•ä(√óÀùÀò4‚ä∏‚Üï))‚åà(‚åà¬¥‚àò‚•ä(√óÀùÀò4‚ä∏‚Üï))‚àò‚çâ

#+begin_src bqn :tangle no :exports none
  E11 inp11
#+end_src

#+RESULTS:
: 70600674

It computes the answer in 300Œºs.

** Problem 12
:PROPERTIES:
:ALT_TITLE: 12
:END:

Here I tried to use an awesome array solution for the number of divisors =1+¬¥0=‚Üï‚ä∏|=,
which unfortunately does not scale. So I use trial division for computing the divisor
function, and also exploit the fact that since \(\text{GCD}(n, n+1)=1\), the divisor
function is the product of the divisor functions of the two numbers, dividing by 2 the
one that is even:

#+begin_src bqn
  E12 ‚Üê (2√∑Àú-‚üú1‚ä∏√ó)¬∑‚ä¢¬¥{ùïä:
    (ùï©+1)‚ãàÀú√ó¬¥utils.Tau¬®(2‚ä∏|)‚ó∂‚ü®√∑‚üú2‚ãà1‚ä∏+, ‚ä¢‚ãà2√∑Àú1‚ä∏+‚ü©ùï©
  }¬¥‚Ä¢_while_(500‚â•‚äë)
#+end_src

#+RESULTS:
: (2√∑Àú-‚üú1‚ä∏√ó)(‚ä¢¬¥(function block)¬¥‚Ä¢_while_(500‚â•‚äë))

#+begin_src bqn :tangle no :exports none
  E12 ‚Üï2
#+end_src

#+RESULTS:
: 76576500

** Problem 13
:PROPERTIES:
:CUSTOM_ID: pe13
:ALT_TITLE: 13
:END:

Shall we play lottery with floating point addition? Put the input in a file and have fun:

#+begin_src bqn :tangle no
  10‚Üë¬∑'.'‚ä∏‚â†‚ä∏/‚àò‚Ä¢Fmt¬∑+¬¥‚Ä¢ParseFloat¬®‚àò‚Ä¢FLines 
#+end_src

#+RESULTS:
: 10‚Üë('.'‚ä∏‚â†‚ä∏/‚àò‚Ä¢Fmt(+¬¥‚Ä¢ParseFloat¬®‚àò(file).Lines))

There, a tacit function for the sake of it, that works only by accident. We can always
implement the high school sum algorithm though (check it out with Python or whatever):

#+begin_src bqn
  E13 ‚Üê {‚àæ‚Ä¢Fmt¬®{c‚àæÀúùï©10{ùï©-ùïó√óc‚Ü©‚åäùïó√∑Àúùï©+‚Ü©c}¬®Àúc‚Üê0}‚åæ‚åΩ+Àù‚Ä¢ParseFloat‚àò‚ãà‚öá0>‚Ä¢FLinesùï©}
#+end_src

#+RESULTS:
: (function block)

#+begin_src bqn :tangle no :exports none
  E13 "../../supp/pe/13.inp"
#+end_src

#+RESULTS:
: "5537376230390876637302048746832985971773659831892672"

** Problem 14
:PROPERTIES:
:ALT_TITLE: 14
:END:

Memoization, so we don't wait an eternity:

#+begin_src bqn
  E14 ‚Üê {
    c ‚Üê ‚Ä¢HashMapÀú‚ãà1
    ‚äë‚çí2‚ä∏|‚ó∂‚ü®√∑‚üú2, 1+3‚ä∏√ó‚ü©{
      c.Hasùï© ? c.Getùï©;
      ùï©(‚ä¢‚ä£c.Set)1+ùïäùîΩùï©
    }¬®1+‚Üïùï©
  }
#+end_src

#+RESULTS:
: (function block)

#+begin_src bqn :tangle no :exports none
  1+E14 1e6
#+end_src

#+RESULTS:
: 837799

** Problem 15
:PROPERTIES:
:ALT_TITLE: 15
:END:

First generate the input array:

#+begin_src bqn :tangle no :results none
  inp15 ‚Üê 1‚åæ‚äë21‚Äø21‚•ä0
#+end_src

Then we can propagate all routes and get the final count:

#+begin_src bqn
  E15 ‚Üê ‚ä¢¬¥‚àò‚•ä(¬ª+¬ªÀò)‚çü(2-Àú+¬¥‚àò‚â¢)
#+end_src

#+RESULTS:
: ‚ä¢¬¥‚àò‚•ä(¬ª+¬ªÀò)‚çü(2-Àú+¬¥‚àò‚â¢)

#+begin_src bqn :tangle no :exports none
  E15 inp15
#+end_src

#+RESULTS:
: 137846528820

The repetition count is the number of diagonals minus one, your answer. This is
unfortunately a slow \(O(mn)\) algorithm, for the optimal solution do this:

#+begin_src bqn :tangle no
  2‚ä∏√ó‚ä∏‚Ä¢math.Comb
#+end_src

** Problem 16
:PROPERTIES:
:CUSTOM_ID: pe16
:ALT_TITLE: 16
:END:

For this problem one is better off using a language with native support for
big integers, which makes it trivial. No fancy math either. BQN has integers up to =2‚ãÜ53=,
so we need to roll our own algorithm. Let's first generate an array that will
contain the digits of the result, using an estimation for the length:

#+begin_src bqn :tangle no :results none
  inp16 ‚Üê 1‚àæ0‚•äÀú‚åä10‚ãÜ‚Åº2‚ãÜ1000
#+end_src

Then we have the following tacit function, which I will dare say is beautiful:

#+begin_src bqn
  E16 ‚Üê +¬¥10{ùïó‚ä∏(|+‚üú¬ª¬∑‚åä√∑Àú)‚çü(‚åàùïó‚ãÜ‚Åº2√óùïó-1)}‚àò(2‚ä∏√ó)‚çü1000
#+end_src

#+RESULTS:
: +¬¥10‚ä∏(|+‚üú¬ª(‚åä√∑Àú))‚çü2‚àò(2‚ä∏√ó)‚çü1000

#+begin_src bqn :tangle no :exports none
  E16 inp16
#+end_src

#+RESULTS:
: 1366

This implementation of arbitrary precision arithmetic is way more elegant
than the one I used in the related [[#pe13][Problem 13]], although it performs more
(but vectorized) operations. In fact, when I first implemented this code,
I had used this construct with an unbounded while for an arithmetic operation ùîΩ:

#+begin_src bqn :tangle no :exports code
  base‚ä∏(|+‚üú¬ª¬∑‚åä√∑Àú)‚Ä¢_while_(‚à®¬¥‚â•‚üúbase)‚àòùîΩ
#+end_src

Then dzaima pointed out that the while loop could be replaced with a simpler repeat.
Provided we know an upper bound =m= for the elements involved in the arithmetic operation,
the iteration should not exceed =‚åàbase‚ãÜ‚Åºm√óbase-1=. In general:

#+begin_src bqn :results none
  MP ‚Üê {bùïän:
    _o ‚Üê {b‚ä∏(|+‚üú¬ª¬∑‚åä√∑Àú)‚çü(‚åàb‚ãÜ‚Åºùï®√ób-1)ùï®ùîΩùï©}
    ‚ü®+‚åæ‚äë, √ó‚ü©{‚àæ‚Ä¢Fmt¬®‚åΩùï©ùïé_o¬¥n}¬®b‚ä∏‚ãÜ‚Åº{(ùîæ‚àòùîΩ‚åà¬¥‚ä∏√ó‚üú‚â†)‚ãà1‚àæ¬∑ùîæ¬∑+¬¥ùîΩ}(0‚•äÀú1+‚åä)n
  }
#+end_src

Yeah, something like that. Although the sum is less useful in that form.

#+begin_src bqn :tangle no :exports both
  10 MP 1500‚Äø2000‚Äø44556‚Äø55663330000
#+end_src

#+RESULTS:
: ‚ü® "055663378056" "07440405994440000000000" ‚ü©

** Problem 17
:PROPERTIES:
:ALT_TITLE: 17
:END:

Nothing special here, store the lengths of the ones', teens' and tens' names
(with padding), pass it in a modifier because a variable would be ugly,
and pattern match:

#+begin_src bqn
  E17 ‚Üê (|‚ãàÀú¬∑‚åä√∑Àú) {
     ùîΩ _ùï£_ ùïò 1000: 11;
     ùï©<100 ? (‚äë10‚Äø20‚ä∏>‚äê1Àô)‚ó∂‚ü®0‚ä∏‚ãà‚äëùîæ, ùïò‚äëÀú1‚ãà-‚üú10, +¬¥¬∑‚äë‚üúùïò2‚Äø0‚ãà¬®10‚ä∏ùîΩ‚ü©ùï©;
     (7+0‚ä∏‚ãà‚äëùîæ)‚ä∏+‚üú(√ó√ó3+ùïä)¬¥100ùîΩùï©
  } [0‚Äø3‚Äø3‚Äø5‚Äø4‚Äø4‚Äø3‚Äø5‚Äø5‚Äø4, 3‚Äø6‚Äø6‚Äø8‚Äø8‚Äø7‚Äø7‚Äø9‚Äø8‚Äø8, 0‚Äø0‚Äø6‚Äø6‚Äø5‚Äø5‚Äø5‚Äø7‚Äø6‚Äø6]
#+end_src

#+RESULTS:
: (|‚ãàÀú(‚åä√∑Àú))(2-modifier block)*array*

#+begin_src bqn :tangle no :exports none
  +¬¥E17¬®1+‚Üï1000
#+end_src

#+RESULTS:
: 21124

The magic numbers 11, 7, and 3 are for =one thousand=, =hundred= and =and= respectively.

** Problems 18 and 67
:PROPERTIES:
:ALT_TITLE: 18
:END:

First we do some parsing, the lame padding to make it look like a proper low triangular
matrix:

#+begin_src bqn :tangle no :exports both
  inp18 ‚Üê >(‚ä¢‚Üë¬®Àú¬∑‚â†‚ä¢¬¥)‚Ä¢ParseFloat‚öá1' '‚ä∏parsing.Split¬®‚Ä¢FLines "../../supp/pe/18.inp"
#+end_src

#+RESULTS:
#+begin_example
‚îå‚îÄ                                              
‚ïµ 75  0  0  0  0  0  0  0  0  0  0  0  0  0  0  
  95 64  0  0  0  0  0  0  0  0  0  0  0  0  0  
  17 47 82  0  0  0  0  0  0  0  0  0  0  0  0  
  18 35 87 10  0  0  0  0  0  0  0  0  0  0  0  
  20  4 82 47 65  0  0  0  0  0  0  0  0  0  0  
  19  1 23 75  3 34  0  0  0  0  0  0  0  0  0  
  88  2 77 73  7 63 67  0  0  0  0  0  0  0  0  
  99 65  4 28  6 16 70 92  0  0  0  0  0  0  0  
  41 41 26 56 83 40 80 70 33  0  0  0  0  0  0  
  41 48 72 33 47 32 37 16 94 29  0  0  0  0  0  
  53 71 44 65 25 43 91 52 97 51 14  0  0  0  0  
  70 11 33 28 77 73 17 78 39 68 17 57  0  0  0  
  91 71 52 38 17 14 91 43 58 50 27 29 48  0  0  
  63 66  4 68 89 53 67 30 73 16 69 87 40 31  0  
   4 62 98 27 23  9 70 98 73 93 38 53 60  4 23  
                                               ‚îò
#+end_example

Then, what a beautiful array dynamic programming solution!

#+begin_src bqn
  E18 ‚Üê ‚äë+‚üú(‚åà‚üú¬´)Àù
#+end_src

#+RESULTS:
: ‚äë+‚üú(‚åà‚üú¬´)Àù

#+begin_src bqn :tangle no :exports none
  E18 inp18
#+end_src

#+RESULTS:
: 1074

This solution also works for Problem 67, which has only larger input. You get the answer in microseconds.

#+begin_src bqn :tangle no :exports none
  ‚äë+‚üú(‚åà‚üú¬´)Àù>(‚ä¢‚Üë¬®Àú¬∑‚â†‚ä¢¬¥)‚Ä¢ParseFloat‚öá1' '‚ä∏parsing.Split¬®‚Ä¢FLines "../../supp/pe/67.inp"
#+end_src

#+RESULTS:
: 7273

** Problem 19
:PROPERTIES:
:ALT_TITLE: 19
:END:

Here we simply simulate the Gregorian calendar, and since in the desired range we don't
have to account for [[https://en.wikipedia.org/wiki/Century_leap_year][century leap years]], testing multiples of 4 suffices:

#+begin_src bqn
  E19 ‚Üê {
    m ‚Üê 31‚Äø28‚Äø31‚Äø30‚Äø31‚Äø30‚Äø31‚Äø31‚Äø30‚Äø31‚Äø30‚Äø31
    {+¬¥0=7|2+`‚•äùï©‚ä∏+‚åæ(1‚äè‚çâ)mÀòùï©}0=4|‚Üì‚üú‚Üï‚óã(1‚ä∏+)¬¥ùï©
  }
#+end_src

#+RESULTS:
: (function block)

Don't forget to add the proper initial to the scan, =7|1+365=.

#+begin_src bqn :tangle no :exports none
  E19 1900‚Äø2000
#+end_src

#+RESULTS:
: 171

** Problem 20
:PROPERTIES:
:ALT_TITLE: 20
:END:

Here we can use the same method for bigint arithmetic of [[#pe16][Problem 16]]. We define the array
that will contain the digits, using an upper bound. This array will be used as the initial for
the fold of the product over the numbers in =1+‚Üï100=. That's it.

#+begin_src bqn :tangle no :results none
  inp20 ‚Üê 1‚àæ0‚•äÀú1+‚åä+¬¥10‚ãÜ‚Åº1+‚Üï100
#+end_src

Then we reuse the tacit function for arbitrary precision multiplication:

#+begin_src bqn
  E20 ‚Üê 10{ùïó‚ä∏(|+‚üú¬ª¬∑‚åä√∑Àú)‚çü(‚åàùïó‚ãÜ‚Åº100√óùïó-1)}‚àò√ó¬¥
#+end_src

#+RESULTS:
: 10‚ä∏(|+‚üú¬ª(‚åä√∑Àú))‚çü3‚àò√ó¬¥

#+begin_src bqn :tangle no :exports none
  +¬¥inp20 E20 1+‚Üï100
#+end_src

#+RESULTS:
: 648

Note that here we implement the high school multiplication algorithm, for larger =n=
we need to use Karatsuba's algorithm or the FFT-based convolution. The base would
have to be adjusted as well.

** Problem 21
:PROPERTIES:
:ALT_TITLE: 21
:END:

Beautiful array solution, not much more to say.

#+begin_src bqn
  E21 ‚Üê {+¬¥/ùï©‚Üëutils.Sigma¬®‚ä∏(‚â†‚àß‚ä¢=¬∑‚äèÀú‚åä‚üúùï©)‚Üïùï©+1}
#+end_src

#+RESULTS:
: (function block)

#+begin_src bqn :tangle no :exports none
  E21 1e4
#+end_src

#+RESULTS:
: 31626

[fn:1]  If I make it that far, I will follow the rule of not sharing solutions
to problems over 100. In that case, I will probably encrypt them with =org-crypt=,
using the value of the solution as the key.

#+INCLUDE: "../html-foot.org"
