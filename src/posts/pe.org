#+TITLE: Project Euler solutions
#+PROPERTY: header-args :tangle ../bqn/pe.bqn

** Disclaimer

This file contains my BQN solutions to some of the problems in [[https://projecteuler.net/][Project Euler]].
It is discouraged to share them, but I very much dislike writing throw-away code,
and that's why they are here. I will not blog about it, but I am happy to discuss
them with anyone who is interested.

Here I define a namespace with some utilities that are often used in the problems:

#+begin_src bqn
  utils ← {
    Sieve ⇐ 2⊸↓{
      L ← {↕∘⌈⌾((𝕨×˜⊸+𝕨×⊢)⁼)∘≠⊸{0¨⌾(𝕨⊸⊏)𝕩}𝕩}
      S ← ⊢>×˜∘⊣⊸⥊⟜0»≠∘⊢⥊↑⟜1
      𝔽/(𝕩⥊1)≤⟜640◶L‿S⍟⊑´⌽𝔽↕⌈√𝕩
    }
  }
#+end_src

#+RESULTS:
: {sieve⇐}

** Problem 1

#+begin_src bqn
  E1 ← +´(∨´0=5‿3|<)⊸/
#+end_src

#+RESULTS:
: +´(∨´0=⟨ 5 3 ⟩|<)⊸/

#+begin_src bqn :tangle no
  E1 ↕1e3
#+end_src

#+RESULTS:
: 233168

** Problem 2

Estimate the upper bound with Binet's formula.

#+begin_src bqn
  E2 ← {+´(¬2⊸|)⊸/{⊑¨+`∘⌽⍟(↕𝕩)↕2}(⌈0.5+𝕩⊸×÷○(⋆⁼)2÷˜1⊸+)√5}
#+end_src

#+RESULTS:
: (function block)

#+begin_src bqn :tangle no
  E2 4e6
#+end_src

#+RESULTS:
: 4613732

** Problem 3

A brute force attempt, in which I got lucky. We create a primes table, and then check:

#+begin_src bqn :tangle no
  p ← ¬∘∊⟜(⥊×⌜˜)⊸/2↓↕1e4
  {𝕩=×´f←p/˜0=p|<𝕩 ? ⌈´f; @}600851475143
#+end_src

#+RESULTS:
: 6857

Provided the size of the input, a much reasonable approach is trial division. We can
achieve this with the following tacit function:

#+begin_src bqn
  E3 ← ⊢´(0=|)◶⟨+⟜2⊸⋈, ⊣⋈÷˜⟩´•_while_(×˜∘⊣⊸<´)
#+end_src

#+RESULTS:
: ⊢´(0=|)◶⟨ +⟜2⊸⋈ ⊣⋈÷˜ ⟩´•_while_(×˜∘⊣⊸<´)

#+begin_src bqn :tangle no
  E3 3‿600851475143 
#+end_src

#+RESULTS:
: 6857

Explanation: since the number is odd, we can start with 3. While the current
divisor is less than the square root of the current number, we check if it
divides the number. If it does, we divide the number by the divisor.
If it doesn't, we increment the divisor by 2 (to consider only odd factors).
This works because a composite number must have a prime factor less
than or equal to its square root.

** Problem 4

Anything other than brute force here? A little tacit function:

#+begin_src bqn
  E4 ← ⌈´·(⌽⊸≡•Fmt)¨⊸/·⥊×⌜˜
#+end_src

#+RESULTS:
: ⌈´((⌽⊸≡•Fmt)¨⊸/(⥊×⌜˜))

#+begin_src bqn :tangle no
  E4 900+↕101
#+end_src

#+RESULTS:
: 906609

This runs in 5 ms with the optimization of searching only in the 900's.

** Problem 5

That felt almost trivial.

#+begin_src bqn
  E5 ← •math.LCM´
#+end_src

#+RESULTS:
: •math.LCM´

#+begin_src bqn :tangle no
  E5 1+↕20
#+end_src

#+RESULTS:
: 232792560

** Problem 6

Yeah well, what can I say, I love this identity:

#+begin_src bqn
  E6 ← ×˜⊸(+´×-⊣)
#+end_src

#+RESULTS:
: ×˜⊸(+´×-⊣)

#+begin_src bqn :tangle no
  E6 1+↕100
#+end_src

#+RESULTS:
: 25164150

In fact, I was terribly stupid. There are closed form solutions for the sum
of the first \(n\) integers and its squares (remember induction?). So after
squaring the former, subtracting the latter and simplifying we get this constant
time solution:

#+begin_src bqn :tangle no
  12÷˜×´⟨⊢, -⟜1, +⟜1, 2+3⊸×⟩{𝕎𝕩}¨100
#+end_src

#+RESULTS:
: 25164150

Quite a few characters more, though.


** PE7

The idea here is to use Eratosthenes' sieve with a correct upper bound, which we get
thanks to Rosser's [[https://en.wikipedia.org/wiki/Prime-counting_function#Inequalities][theorem]]:

#+begin_src bqn
  E7 ← {
    Rosser ← ⌈⋆⁼{𝔽∘𝔽⊸+⟜𝔽⊸×}
    (-⟜1⊑utils.Sieve∘Rosser) 𝕩
  }
#+end_src

#+RESULTS:
: (function block)

Which evaluates:

#+begin_src bqn :tangle no
  E7 1e4+1
#+end_src

#+RESULTS:
: 104743

The sieve uses heuristics to decide which operation to perform when marking the multiples,
either zeroing the indices for large argument or creating a mask and multiplying by the
current array in the fold. As a bonus, here is a comparison of Eratosthenes' sieves implementations:

#+begin_src bqn :tangle no
  S0 ← 2⊸↓{𝔽/(𝕩⥊1)⊑◶⊢‿{↕∘⌈⌾((𝕨×˜⊸+𝕨×⊢)⁼)∘≠⊸{0¨⌾(𝕨⊸⊏)𝕩}𝕩}´⌽𝔽↕⌈√𝕩}
  S1 ← 2⊸↓{𝔽/(𝕩⥊1){↕∘⌈⌾((𝕨×˜⊸+𝕨×⊢)⁼)∘≠⊸{0¨⌾(𝕨⊸⊏)𝕩}𝕩}⍟⊑´⌽𝔽↕⌈√𝕩}
  S2 ← 2⊸↓{𝔽/(𝕩⥊1){𝕩>(≠𝕩)↑/⁼↕∘⌈⌾((𝕨×˜⊸+𝕨×⊢)⁼)≠𝕩}⍟⊑´⌽𝔽↕⌈√𝕩}
  S3 ← 2⊸↓{𝔽/(𝕩⥊1)(⊢>×˜∘⊣⊸⥊⟜0»≠∘⊢⥊↑⟜1)⍟⊑´⌽𝔽↕⌈√𝕩}
  S4 ← {
    L ← {↕∘⌈⌾((𝕨×˜⊸+𝕨×⊢)⁼)∘≠⊸{0¨⌾(𝕨⊸⊏)𝕩}𝕩}
    S ← ⊢>×˜∘⊣⊸⥊⟜0»≠∘⊢⥊↑⟜1
    2↓/(𝕩⥊1)≤⟜640◶L‿S⍟⊑´⌽2↓↕⌈√𝕩
  }
  •Show 1=≠∘⍷ S0‿S1‿S2‿S3‿S4 {𝕎𝕩}¨< 1e4
  S0‿S1‿S2‿S3‿S4 {𝕏•_timed𝕨}⌜˜ 10⋆3‿5‿7‿8‿9
#+end_src

#+RESULTS:
: 1
: ┌─                                                                                                      
: ╵          8.5813e¯5          8.4411e¯5             8.5593e¯5           3.958e¯6 3.6970000000000003e¯6  
:          0.001241902        0.001077388 0.0009073750000000001          7.2879e¯5             7.0424e¯5  
:          0.144439973        0.139676776           0.120608139        0.049470815           0.029924439  
:   3.5437995570000003 2.0786221950000003    3.6722926040000003 3.5986206610000004           0.985192575  
:   28.261043074000003 27.725597807000003     92.62981303100001  98.58912269400001    17.110364360000002  
:                                                                                                        ┘

** PE8

A simple windowed reduction:

#+begin_src bqn
  E8 ← ⌈´·(×´⊢-@+48˙)˘13⊸↕
#+end_src

#+RESULTS:
: ⌈´((×´⊢-@+48˙)˘13⊸↕)

Boom:

#+begin_src bqn :tangle no
  E8 "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
#+end_src

#+RESULTS:
: 23514624000

** PE9

A stupid brute force does the trick:

#+begin_src bqn
  E9 ← {(××+⌾(×˜))´¨1+/○⥊⟜(↕≢)(<⌜˜↕≠𝕩)×(1e3=+++⌾(×˜))⌜˜𝕩}
#+end_src

#+RESULTS:
: (function block)

Then:

#+begin_src bqn :tangle no
  E9 1+↕1e3
#+end_src

#+RESULTS:
: ⟨ 31875000 ⟩
