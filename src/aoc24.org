# -*- eval: (face-remap-add-relative 'default '(:family "BQN386 Unicode" :height 180)); -*-
#+TITLE: Coding in Advent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="assets/style.css"/>
#+HTML_HEAD: <link rel="icon" href="assets/favicon.ico" type="image/x-icon">
#+HTML_HEAD: <style>
#+HTML_HEAD:   #table-of-contents > h2 { display: none; }
#+HTML_HEAD:   #text-table-of-contents > ul { 
#+HTML_HEAD:     display: grid;
#+HTML_HEAD:     grid-template-columns: repeat(5, 1fr);
#+HTML_HEAD:     gap: 10px;
#+HTML_HEAD:     list-style: none;
#+HTML_HEAD:     padding: 0;
#+HTML_HEAD:     margin: 0;
#+HTML_HEAD:   }
#+HTML_HEAD:   #table-of-contents > ul > li {
#+HTML_HEAD:     text-align: center;
#+HTML_HEAD:   }
#+HTML_HEAD: </style>

#+TOC: headlines 1 :ignore-title t

** Foreword
:PROPERTIES:
:UNNUMBERED: notoc
:END:

Welcome to my [[https://adventofcode.com/2024][Advent of Code]] solutions for the year 2024. Please read the puzzles' descriptions upstream
to get more context. These definitions and imports are shared by the various puzzles:

#+begin_src bqn :tangle ./bqn/aoc24.bqn
  Split ← (¬-˜⊢×·+`»⊸>)∘≠⊔⊢
  Input ← {"../supp/aoc/2024/"∾".inp"∾˜•Fmt𝕩}
  _is ← {(𝔽𝕩).eins⋈(𝔽𝕩).zwei}
#+end_src

#+RESULTS:
: (1-modifier block)

** I

#+begin_src bqn :tangle ./bqn/aoc24.bqn 
  I ← {
    inp ← >(•ParseFloat¨' '⊸Split)¨•FLines Input𝕩
    eins ⇐ +´|-´˘∧˘⌾⍉inp
    zwei ⇐ {+´𝕨×-´(∧𝕩)⊸⍋¨(⊢⋈-⟜1)𝕨}´<˘⍉inp
  }
  I _is 1
#+end_src

#+RESULTS:
: ⟨ 2057374 23177084 ⟩

** II

#+begin_src bqn :tangle ./bqn/aoc24.bqn
  II ← {
    inp ← (-´˘·2⊸↕·•ParseFloat¨' '⊸Split)¨•FLines Input𝕩
    P‿Q ← ⟨3≥⌈´∘|, ≠=·|+´∘×⟩
    F1‿F2‿F3 ← P‿P‿Q {𝕎∧𝕏}¨ ⟨Q, 1=≠-·|·+´×, 1=·+´3>|⟩   
    eins ⇐ +´F1¨inp
    zwei ⇐ eins + {a‿b‿ab: ab-˜b+a} ⟨F2, F3, F2∧F3⟩ {≠𝕎¨⊸/𝕩}¨ <(¬F1¨)⊸/inp
  }
  II _is 2
#+end_src

#+RESULTS:
: ⟨ 483 528 ⟩

** III

#+begin_src bqn :tangle ./bqn/aoc24.bqn
  III ← {
    mem ← •FChars Input𝕩
    prg ← mem/˜1=×∘+`2×-´"do()"‿"don't()"(≢∘⊢↑⍷)¨<mem
    mul‿cmd ← {(12↑↓⟜𝕩)¨4+/"mul("(≢∘⊢↑⍷)𝕩}¨mem‿prg
    C ← {
      l‿r←⊑⎊0¨1(↑⋈↓)','Split𝕩
      l×○•ParseFloat⎊0 (∨´⎊0')'⊸=)◶⟨0, ⊑')'⊸Split⟩r
    }
    eins‿zwei ⇐ (+´C¨)¨ mul‿cmd
  }
  III _is 3
#+end_src

#+RESULTS:
: ⟨ 165225049 108830766 ⟩

** IV

#+begin_src bqn :tangle ./bqn/aoc24.bqn
  IV ← {
    inp ← >•FLines Input 𝕩
    t‿ts ← ⟨"XMAS"‿"SAMX", "MSAMS"‿"SMASM"‿"SSAMM"‿"MMASS"⟩
    eins ⇐ +´+´∘⥊¨t ⍷⌜{⟨+´𝕨𝔽<𝕩, +´𝕨𝔽<⍉𝕩, ∾+˝𝕨𝔽𝔾𝕩, ∾+˝𝕨𝔽𝔾⌽𝕩⟩}(⊢⊔˜·+⌜´↕¨∘≢) inp
    xm ← ⌽˘⊸∨=⌜˜↕3 ⋄ zwei ⇐ +´⥊{ts≡¨<xm/○⥊𝕩}⎉2 3‿3↕inp
  }
  IV _is 4
#+end_src

#+RESULTS:
: ⟨ 2397 1824 ⟩

** V

#+begin_src bqn :tangle ./bqn/aoc24.bqn
  V ← {
    p‿r ← ",|" •ParseFloat⚇1∘(Split¨)¨ 1↓(∧`⊸+⟨⟩⊸≢¨)⊸⊔ •FLines Input𝕩
    M ← (⍒∊⟜(>r)∘⋈⌜˜)¨⊏¨⊢
    g‿b ← p⊔˜∞=+´˘ p (2=·+´∘⥊=⌜)◶0‿{𝕩(⊣≡⊢/˜·+˝=⌜)𝕨?1;∞}⌜ r
    eins‿zwei ⇐ (+´(⊢⊑˜·⌊2÷˜≠)¨)¨ g⋈M b
  }
  V _is 5
#+end_src

#+RESULTS:
: ⟨ 6242 5169 ⟩

** VI

#+begin_src bqn :tangle ./bqn/aoc24.bqn
  VI ← {
    hm ← (↕∘≢•HashMap○⥊⊢) inp ← >•Flines Input𝕩
    g ← ⊑/○⥊⟜(↕≢)'^'= inp ⋄ r ← ⟨¯1, 0⟩‿⟨0, 1⟩‿⟨1, 0⟩‿⟨0, ¯1⟩
    Sym ← {𝕊m: s ← •HashMap˜⟨⟩
      (s.Keys@) ⋈ s.Has {𝕊p‿d:
        s.Set˜p‿d ⋄ '#'=◶{𝕊:d⋈˜p+d⊑r}‿{𝕊:p⋈4|d+1} m.Get⎊@ p+d⊑r
      }•_while_{𝕊𝕩: (m.Has⊑𝕩) ∧ ¬s.Has𝕩} g‿0
    }
    eins‿zwei ⇐ (≠⋈·+´{𝕩hm.Set'#' ⋄ (𝕩hm.Set'.')⊢⊢´Sym hm}¨) ⍷⊏⍉>⊑Sym hm
  }
  VI _is 6
#+end_src

#+RESULTS:
: ⟨ 5444 1946 ⟩

** VII

#+begin_src bqn :tangle ./bqn/aoc24.bqn
  VII ← {
    inp ← (⊑⊸⋈○(•ParseFloat¨' '⊸Split)´':'⊸Split)¨•FLines Input𝕩
    C ← ⊢+⊣×10⊸⋆⟜(⌊1+10⋆⁼1⌈|)
    eins ⇐ +´{⊑𝕨∊(+∾×)´⌽𝕩?𝕨;0}´¨ inp
    zwei ⇐ +´{⊑𝕨∊(C˜∾+∾×)´⌽𝕩?𝕨;0}´¨ inp
  }
  VII _is 7
#+end_src

#+RESULTS:
: ⟨ 6231007345478 333027885676693 ⟩

** VIII

#+begin_src bqn :tangle ./bqn/aoc24.bqn
  VIII ← {
    n ← ≠⊑inp‿ant ← (⊢⋈1↓⍷∘⥊)>•FLines Input𝕩
    _tcd ← {(𝕨⊸×-(𝕨-1)×⊣)⌜˜⊸𝔽/○⥊⟜(↕≢)𝕩}
    eins ⇐ ≠⍷(∧´≥⟜0∧<⟜n)⊸/∾ 2 (⥊∘⊣/˜·¬⥊⊸∊)_tcd¨ ant=<inp
    zwei ⇐ +´(∧´≥⟜0∧<⟜n)¨⍷∾∾ (↕n) ⥊∘⊣_tcd¨⌜<ant=<inp
  }
  VIII _is 8
#+end_src

#+RESULTS:
: ⟨ 291 1015 ⟩

** IX

#+begin_src bqn :tangle ./bqn/aoc24.bqn
  IX ← {
     f‿s ← <˘⍉↑‿2⥊•ParseFloat∘⋈¨⊑•FLines Input𝕩
     m ← ¯1=d ← ∾⥊⍉ds ← (⊔˜/f)≍¯1¨∘↕¨sm ← s
     ds ⊣ {n𝕊cf: (p<n)∧(≠f)>p←⊑1⊐˜cf≠⊸≤sm?
       ds({cf«𝕩}⌾(1‿p⊸⊑){¯1¨𝕩}⌾(0‿n⊸⊑))↩ ⋄ @⊣sm{𝕩-≠cf}⌾(p⊸⊑)↩; @
     }´˘(⊢≍˘˜·⌽⊒˜)⌽⊏ds
     eins ⇐ {+´(⊢×↕∘≠)(𝕩-˜≠d)↑(𝕩↑⌽/f)⌾(m⊸/)d}+´s
     zwei ⇐ +´(⊢×↕∘≠)(⊢×¯1⊸≠)∾⥊⍉{𝕊⟨⟩:𝕩;(⌽∘⊣∾⊢)´𝕩⊔˜𝕩=¯1}¨⌾(1⊸⊏)ds
  }
  IX _is 9
#+end_src

#+RESULTS:
: ⟨ 6378826667552 6413328569890 ⟩

** X

#+begin_src bqn :tangle ./bqn/aoc24.bqn
  X ← {
    inp ← >'0'-˜•FLines Input𝕩
    I ← {(𝕨⊸=/○⥊⟜(↕≢)⊢)𝕩} ⋄ ct ← 9=inp
    P ← {(4/≍≢inp)(⊢/˜·∧´˘>∧0⊸≤)>⟨¯1‿0, 0‿1, 1‿0, 0‿¯1⟩+<𝕩}
    BFS ← {
      v‿r ← •HashMap{⟨𝕩𝔽○⋈@, 𝔽˜⟨⟩⟩}𝕩
      (r.Count@) ⊣ 1⊸↓∘{9=⊑⊑𝕩 ? 𝕩⊣@r.Set˜⊢´⊑𝕩; h‿c←⊑𝕩
        𝕩∾@⊸≢¨⊸/⥊{(h=1-˜𝕩⊑inp)∧¬v.Has𝕩}◶⟨@⟩‿{@v.Set˜𝕩⋄⋈𝕩⋈˜h+1}˘P c
      }•_while_{𝕊:0≠≠𝕩} ⋈0‿𝕩
    }
    DP ← {𝕊h: {ct(+´{h=1-˜𝕩⊑inp?𝕩⊑ct;0}˘P𝕩)⌾(𝕩⊸⊑)↩}¨𝕩I inp}
    eins ⇐ +´BFS¨ 0 I inp
    zwei ⇐ +´⥊(inp=0)×ct⊣DP¨⌽↕9
  }
  X _is 10
#+end_src

#+RESULTS:
: ⟨ 776 1657 ⟩

#+BEGIN_EXPORT html
  <div style="text-align: center; font-size: 2em; padding: 20px 0;">
    <a href="https://panadestein.github.io/blog/" style="text-decoration: none;">⊑∘∞</a>
  </div>
#+END_EXPORT
