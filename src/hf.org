# -*- eval: (face-remap-add-relative 'default '(:family "BQN386 Unicode" :height 180)); -*-
#+TITLE: Helonium's Hartree-Fock program
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="assets/style.css"/>
#+HTML_HEAD: <link rel="icon" href="assets/favicon.ico" type="image/x-icon">
#+HTML_HEAD: <style>
#+HTML_HEAD: mjx-container[jax="CHTML"] {
#+HTML_HEAD:   overflow-x: auto !important;
#+HTML_HEAD: }
#+HTML_HEAD: </style>

** Exordium

We will implement the Hartree-Fock[fn:1] program from the classic [[https://store.doverpublications.com/products/9780486691862][Szabo-Ostlund]] text,
a staple in quantum chemistry. If you have any experience in the field, chances are you know it well.
If you don't, the BQN implementation will take you only a few cognitive units: the coarse mathematical
description involves basis sets, the calculation of electronic integrals, and the self-consistent
optimization of the Fock matrix. Using this program, we will compute the energy of the HeH\(^+\) molecule[fn:2].

First, we import the required BQN system values and utility functions:

#+begin_src bqn :results none :tangle ./bqn/hf.bqn
  Sin‿Cos‿Tan‿Erf ← •math
  Setplot‿Plot ← •Import "../bqn-utils/plots.bqn"
  Setplot "line"
#+end_src

Two additional auxiliary functions are needed for the computation of the integrals and the eigenvalues:

#+begin_src bqn :results none :tangle ./bqn/hf.bqn
  E ← 1e¯6⊸<◶(1-÷⟜3)‿((π÷4)⊸÷×⟜Erf○√⊢)
#+end_src

Then, we create a namespace with the physical constants defining the system[fn:3],
as is customary in /ab-initio/ methods:

#+begin_src bqn :results none :tangle ./bqn/hf.bqn
  system ← {
    e1‿e2 ⇐ 2.0925‿1.24
    z1‿z2 ⇐ 2‿1
    r ⇐ 1.4632 
  }
#+end_src

** Basis set

Basis sets are used to transform the PDEs into linear algebra problems. Physical intuition suggests that
Slater type orbitals[fn:4] are a good choice for our Hamiltonian. However, the computation of the integrals
is a lot easier if we approximate them using Gaussian functions[fn:5]. Specifically, the STO-3G approach defines
the approximating function as follows:

#+begin_src bqn :results none :tangle ./bqn/hf.bqn
  STO ← {
    e ← 0.109818‿0.405771‿2.22766 ××˜ 𝕩
    c ← 0.444635‿0.535328‿0.154329
    e⋈c×(2×e÷π)⋆3÷4
  }
#+end_src

** Electronic integrals

Constructing the integrals' tensor is complicated[fn:6] and is the main reason for the poor scaling
of electronic structure methods. The \(1s\) orbitals are the simplest case, and here two types of integrals
are analytical (S, T) while the rest already lacks a closed-form solution (V, ERI):

#+begin_src bqn :results none :tangle ./bqn/hf.bqn 
  S ← {a‿b𝕊𝕩: (1.5⋆˜π÷a+b) × ⋆-𝕩×a(×÷+)b}
  T ← {a‿b𝕊𝕩: f ← a(×÷+)b ⋄ ×´⟨1.5⋆˜π÷a+b, (3×f)-2×𝕩××˜f, ⋆-𝕩×f⟩}
  V ← {a‿b‿z𝕊r‿s: ×´⟨-2×z×π÷a+b, E s×a+b, ⋆-r×a(×÷+)b⟩}
  ERI ← {a‿b‿c‿d𝕊r1‿r2‿r3‿r4:
    r5 ← -´⟨a‿b ⋄ c‿d⟩ (+´∘×÷+´∘⊣)¨ ⟨r1‿r2 ⋄ r3‿r4⟩
    f1‿f2‿f3 ← a‿b ({(√∘+××)⋈(×÷+)}○(+´)∾<∘⋈○((×÷+)´)) c‿d
    ×´⟨f1÷˜2×π⋆5÷2, E f2××˜r5, ⋆-+´f3××˜-´¨⟨r1‿r2, r3‿r4⟩⟩
  }
#+end_src

#+begin_export html
<br/>
<details>
<summary>Derivation strategy</summary>
#+end_export

We need to compute the overlap (S), kinetic energy (T), nuclear attraction (V), and four-center (ERI) integrals.
Crucially, the product of two Gaussians at different centers is proportional to a Gaussian at a scaled center.
This property, combined with the Laplacian of a Gaussian, readily yields S and T. The remaining
two sets are more complex: we combine the Gaussians as before, then transform to reciprocal space where
the delta distribution arises and simplifies the problem to this integration by reduction:

\begin{equation*}
  I(x) = \int_0^{\infty}{{{e^ {- a\,k^2 }\,\sin \left(k\,x\right)}\over{k}}\;dk} \sim \text{Erf}(x)
\end{equation*}

#+begin_export html
</details>
#+end_export

** Fock matrix

The following function constructs the Fock matrix, our approximation to the true Hamiltonian of the system.
Extending the code to an arbitrary number of atoms implies mapping over an array of coordinates,
as opposed to fusing them in the implementation.

#+begin_src bqn :tangle ./bqn/hf.bqn :results none
  F ← {𝕊e1‿e2‿z1‿z2‿r:
    bs‿na‿nb ← (<∾·≢⊏∘>)⍉>STO¨ e1‿e2
    M ← {∾‿×({2: {nb(⋈˜/∘⋈˜)⊸⊔𝕎⌜˜𝕩}; 4: {𝕎⌜⍟3˜𝕩}}𝕩)¨○⊢<∘∾˘bs}

    sm‿hcore ← {e𝕊c:
      mst ← ⌽⊸≍∾⟜0×˜r
      r1‿r2 ← <˘⍉⁼> (r⊸-⊸⋈˜×⟜r÷+)⌜´ ⊏bs
      mv ← ×˜∘{[0‿2,3‿1]⊏({0‿𝕨¨𝕩}⟜𝕩¨𝕨)∾⋈⟜⍉r⋈¨𝕩}´¨⟨0‿r, r1⟩‿⟨r‿0, r2⟩
      (⊑⋈·+´1⊸↓)+´∘⥊¨¨ c<⊸× ({e𝕏¨¨mst}¨S‿T) ∾ z1‿z2{e∾⟜𝕨⊸V¨¨𝕩}¨mv
    }´ M 2

    erim ← {e𝕊c:
      meri ← (c⊸×⊣ERI¨⊢/˜·<¨≢∘⊣÷≢∘⊢)⟜{0‿r⊏˜⚇1↕na¨↕=𝕩} e
      =⊸{+˝∘⥊⎉𝕨 (2×↕𝕨)⍉⁼(na‿nb⥊˜na×𝕨)⥊𝕩} meri
    }´ M 4
  }
#+end_src

#+begin_export html
<br/>
<details>
<summary>Physical context</summary>
#+end_export

The Fock operator is an effective one-electron operator that arises after constrained
minimization of the energy functional:

\begin{equation*}
  \tilde{\mathcal{F}} \left[ \{\psi_i\} \right] = \sum_i h_i +
  \frac{1}{2} \sum_{i,j} (J_{ij} - K_{ij}) - \sum_{i,j} \lambda_{ij}
  \left( \langle \psi_i | \psi_j \rangle - \delta_{ij} \right)
\end{equation*}

where \(h_i\) is the core Hamiltonian matrix and \(J_{ij}, K_{ij}\) are the Coulomb and
exchange components of the ERI matrix. To fully understand the derivation, consider
the variational derivative of this functional with respect to the complex
conjugate of the wave function \(\psi_i^*\):

\begin{align*}
  \lim_{\epsilon \to 0} \frac{\tilde{\mathcal{F}} \left[ \psi_k^* + \epsilon \delta
   \psi_k^* \right] - \tilde{\mathcal{F}} \left[ \psi_k^* \right]}{\epsilon} 
  &= \langle \delta \psi_k | \hat{h} | \psi_k \rangle + \sum_j \left( \langle \delta
   \psi_k \psi_j | \frac{1}{r} | \psi_k \psi_j \rangle - \langle \delta
   \psi_k \psi_j | \frac{1}{r} | \psi_j \psi_k \rangle \right)
   - \sum_j \lambda_{kj} \langle \delta \psi_k | \psi_j \rangle \\
  &= \int \left[ \hat{h} \psi_k(x) + \sum_j
     \left( \psi_k(x) \int \frac{|\psi_j(x')|^2}{|r - r'|} dx'
   - \psi_j(x) \int \frac{\psi_j^*(x') \psi_k(x')}{|r - r'|} dx' \right) \right.
   \left. - \sum_j \lambda_{kj} \psi_j(x) \right] \delta \psi_k^*(x) \, dx.
\end{align*}

As discussed earlier, basis sets are used to discretize the Hartree-Fock problem.
This process results in the  [[https://en.wikipedia.org/wiki/Roothaan_equations][Roothaan equations]], which are implemented in the code below.

#+begin_export html
</details>
#+end_export

#+begin_export html
<br/>
<details>
<summary>Performance</summary>
#+end_export

The computation of the ERIs is expected to be the primary bottleneck, as there are =N⋆4= of them—in our case, 16.
The required tensors have a shape of =6¨↕4=. As shown in the profile below, using an array-based strategy
for the ERIs significantly improved their computational efficiency compared to the two-center integrals.
For the latter, I increased the depth by grouping the tables (block matrices). The resulting code was significantly
slower than replicating the elements to match each axis' length, like I do for the ERIs.

#+begin_src bqn :exports both :tangle no :results raw :wrap example
  )profile {𝕊: F system}¨↕1e4
#+end_src

#+RESULTS:
#+begin_example
Got 38135 samples
(REPL): 37021 samples:
    92│F ← {𝕊e1‿e2‿z1‿z2‿r:
    72│  bs‿na‿nb ← (<∾·≢⊏∘>)⍉>STO¨ e1‿e2
  2127│  M ← {∾‿×({2: {nb(⋈˜/∘⋈˜)⊸⊔𝕎⌜˜𝕩}; 4: {𝕎⌜⍟3˜𝕩}}𝕩)¨○⊢<∘∾˘bs}
      │
   265│  sm‿hcore ← {e𝕊c:
    99│    mst ← ⌽⊸≍∾⟜0×˜r
  4235│    r1‿r2 ← <˘⍉⁼> (r⊸-⊸⋈˜×⟜r÷+)⌜´ ⊏bs
 15947│    mv ← ×˜∘{[0‿2,3‿1]⊏({0‿𝕨¨𝕩}⟜𝕩¨𝕨)∾⋈⟜⍉r⋈¨𝕩}´¨⟨0‿r, r1⟩‿⟨r‿0, r2⟩
  8864│    (⊑⋈·+´1⊸↓)+´∘⥊¨¨ c<⊸× ({e𝕏¨¨mst}¨S‿T) ∾ z1‿z2{e∾⟜𝕨⊸V¨¨𝕩}¨mv
  3980│  }´ M 2
      │
     9│  erim ← {e𝕊c:
  1049│    meri ← (c⊸×⊣ERI¨⊢/˜·<¨≢∘⊣÷≢∘⊢)⟜{0‿r⊏˜⚇1↕na¨↕=𝕩} e
   280│    =⊸{+˝∘⥊⎉𝕨 (2×↕𝕨)⍉⁼(na‿nb⥊˜na×𝕨)⥊𝕩} meri
     2│  }´ M 4
      │}
(self-hosted runtime1): 1114 samples
#+end_example

Morals: Never underestimate the power of vectorization and reshaping operations are often computationally trivial.

#+begin_export html
</details>
#+end_export

** SCF

Compare the electronic energy with the one computed using the original [[./supp/hf_so/hf_so.html][F66]] program.

#+begin_export html
<details>
<summary>Potential Energy Curve</summary>
#+end_export

The [[https://en.wikipedia.org/wiki/Potential_energy_surface][PEC]] of the system will be here:

#+NAME: attr_wrap
#+BEGIN_SRC sh :var data="" :results output :exports none :tangle no
  echo "<div style='text-align: center;'>"
  echo "$data"
  echo "</div>"
#+END_SRC

#+begin_src bqn :results html :exports both :tangle ./bqn/hf.bqn :post attr_wrap(data=*this*)
  )r •Out¨ 10‿⟨1, 1⟩ Plot ⋈˜ 2+↕10
#+end_src

#+RESULTS:
#+begin_export html
<div style='text-align: center;'>
<svg viewBox='-1 -1 12 12' width='30%'>
  <g font-family='BQN,monospace' font-size='18px'>
    <rect class='code' fill='#e3e7e7' stroke-width='1' rx='0.5' x='-0.5' y='-0.5' width='11' height='11'/>
    <path class='code' stroke='black' stroke-width='0.1' d='M0 10L1.111 8.889L2.222 7.778L3.333 6.667L4.444 5.556L5.556 4.444L6.667 3.333L7.778 2.222L8.889 1.111L10 0'/>
  </g>
</svg>
</div>
#+end_export

#+begin_export html
</details>
#+end_export

[fn:1] Recasting of the [[https://en.wikipedia.org/wiki/Schr%C3%B6dinger_equation#Time-independent_equation][TISE]] into a set of coupled integro-differential equations. Derived by optimizing
the expectation value of the energy subject to normalization constraints, then discretizing it using a suitable
basis set.
[fn:2] It may not look like much, but helonium was the very [[https://www.scientificamerican.com/article/the-first-molecule-in-the-universe/][first molecule]] formed in the universe.
[fn:3] This program can compute the Hartree-Fock energy of any two-electron diatomic molecule.
[fn:4] STO: functions of the form \(r^le^{-\zeta r}Y_l^m(\theta, \phi)\). For \(1s\) orbitals the
spherical harmonics integrate out to 1.
[fn:5] STO-nG: a non-linear least-squares fit of an STO as a weighted sum of n Gaussians.
[fn:6] See for example [[https://arxiv.org/abs/2007.12057][arXiv:2007.12057]].

#+BEGIN_EXPORT html
  <div style="text-align: center; font-size: 2em; padding: 20px 0;">
    <a href="https://panadestein.github.io/blog/" style="text-decoration: none;">⊑∘∞</a>
  </div>
#+END_EXPORT
