# -*- eval: (face-remap-add-relative 'default '(:family "BQN386 Unicode" :height 180)); -*-
#+TITLE: Helonium's Hartree-Fock program
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="assets/style.css"/>
#+HTML_HEAD: <link rel="icon" href="assets/favicon.ico" type="image/x-icon">
#+HTML_HEAD: <style>
#+HTML_HEAD: mjx-container[jax="CHTML"] {
#+HTML_HEAD:   overflow-x: auto !important;
#+HTML_HEAD: }
#+HTML_HEAD: </style>

** Exordium

We will implement the Hartree-Fock[fn:1] program from the classic [[https://store.doverpublications.com/products/9780486691862][Szabo-Ostlund]] text,
a staple in quantum chemistry. If you have any experience in the field, chances are you know it well.
If you don't, the BQN implementation will take you only a few cognitive units: the coarse mathematical
description involves basis sets, the calculation of electronic integrals, and the self-consistent
optimization of the Fock matrix. Using this program, we will compute the energy of the HeH\(^+\) molecule[fn:2].

First, we import the required BQN system values and utility functions:

#+begin_src bqn :results none :tangle ./bqn/hf.bqn
  Sin‿Cos‿Tan‿Erf ← •math
  Setplot‿Plot ← •Import "../bqn-utils/plots.bqn"
#+end_src

Two additional auxiliary functions are needed for the computation of the integrals and the eigenvalues:

#+begin_src bqn :results none :tangle ./bqn/hf.bqn
  E ← 1e¯6⊸<◶(1-÷⟜3)‿((π÷4)⊸÷×⟜Erf○√⊢)
#+end_src

Then, we create a namespace with the physical constants defining the system[fn:3],
as is customary in /ab-initio/ methods:

#+begin_src bqn :results none :tangle ./bqn/hf.bqn
  system ← {
    e1‿e2 ⇐ 2.0925‿1.24
    z1‿z2 ⇐ 2‿1
    r ⇐ 1.4632 
  }
#+end_src

** Basis set

Basis sets are used to transform the PDEs into linear algebra problems. Physical intuition suggests that
Slater type orbitals[fn:4] are a good choice for our Hamiltonian. However, the computation of the integrals
is a lot easier if we approximate them using Gaussian functions[fn:5]. Specifically, the STO-3G approach defines
the approximating function as follows:

#+begin_src bqn :results none :tangle ./bqn/hf.bqn
  STO ← {
    e ← 0.109818‿0.405771‿2.22766 ××˜ 𝕩
    c ← 0.444635‿0.535328‿0.154329
    e⋈c×(2×e÷π)⋆3÷4
  }
#+end_src

** Electronic integrals

Constructing the integrals' tensor is complicated[fn:6] and is the main reason for the poor scaling
of electronic structure methods. The \(1s\) orbitals are the simplest case, and here two types of integrals
are analytical (S, T) while the rest already lacks a closed-form solution (V, ERI):

#+begin_src bqn :results none :tangle ./bqn/hf.bqn 
  S ← {a‿b𝕊𝕩: (1.5⋆˜π÷a+b) × ⋆-𝕩×a(×÷+)b}
  T ← {a‿b𝕊𝕩: f ← a(×÷+)b ⋄ ×´⟨1.5⋆˜π÷a+b, (3×f)-2×𝕩××˜f, ⋆-𝕩×f⟩}
  V ← {a‿b‿z𝕊r‿s: ×´⟨-2×z×π÷a+b, E s×a+b, ⋆-r×a(×÷+)b⟩}
  ERI ← {a‿b‿c‿d𝕊r1‿r2‿r3‿r4:
    r5 ← -´⟨a‿b ⋄ c‿d⟩ (+´∘×÷+´∘⊣)¨ ⟨r1‿r2 ⋄ r3‿r4⟩
    f1‿f2‿f3 ← a‿b ({(√∘+××)⋈(×÷+)}○(+´)∾<∘⋈○((×÷+)´)) c‿d
    ×´⟨f1÷˜2×π⋆5÷2, E f2××˜r5, ⋆-+´f3××˜-´¨⟨r1‿r2, r3‿r4⟩⟩
  }
#+end_src

#+begin_export html
<br/>
<details>
<summary>Derivation strategy</summary>
#+end_export

We need to compute the overlap (S), kinetic energy (T), nuclear attraction (V), and four-center (ERI) integrals.
Crucially, the product of two Gaussians at different centers is proportional to a Gaussian at a scaled center.
This property, combined with the Laplacian of a Gaussian, readily yields S and T. The remaining
two sets are more complex: we combine the Gaussians as before, then transform to reciprocal space where
the delta distribution arises and simplifies the problem to this integration by reduction:

\begin{equation*}
  I(x) = \int_0^{\infty}{{{e^ {- a\,k^2 }\,\sin \left(k\,x\right)}\over{k}}\;dk} \sim \text{Erf}(x)
\end{equation*}

#+begin_export html
</details>
#+end_export

** Fock matrix

The following function constructs the Fock matrix, our approximation to the true Hamiltonian of the system.
Extending the code to an arbitrary number of atoms implies mapping over an array of coordinates,
as opposed to fusing them in the implementation.

#+begin_src bqn :tangle ./bqn/hf.bqn :results none
  F ← {𝕊e1‿e2‿z1‿z2‿r:
    bs‿na‿nb ← (<∾·≢⊏∘>)⍉>STO¨ e1‿e2
    M ← {∾‿×({2: {nb(⋈˜/∘⋈˜)⊸⊔𝕎⌜˜𝕩}; 4: {𝕎⌜⍟3˜𝕩}}𝕩)¨○⊢<∘∾˘bs}

    sm‿hcore ← {e𝕊c:
      mst ← ⌽⊸≍∾⟜0×˜r
      r1‿r2 ← <˘⍉⁼> (r⊸-⊸⋈˜×⟜r÷+)⌜´ ⊏bs
      mv ← ×˜∘{[0‿2,3‿1]⊏({0‿𝕨¨𝕩}⟜𝕩¨𝕨)∾⋈⟜⍉r⋈¨𝕩}´¨⟨0‿r, r1⟩‿⟨r‿0, r2⟩
      (⊑⋈·+´1⊸↓)+´∘⥊¨¨ c<⊸× ({e𝕏¨¨mst}¨S‿T) ∾ z1‿z2{e∾⟜𝕨⊸V¨¨𝕩}¨mv
    }´ M 2

    erim ← {e𝕊c:
      meri ← (c⊸×⊣ERI¨⊢/˜·<¨≢∘⊣÷≢∘⊢)⟜{0‿r⊏˜⚇1↕na¨↕=𝕩} e
      =⊸{+˝∘⥊⎉𝕨 (2×↕𝕨)⍉⁼(na‿nb⥊˜na×𝕨)⥊𝕩} meri
    }´ M 4
  }
#+end_src

#+begin_export html
<br/>
<details>
<summary>Physical context</summary>
#+end_export

The Fock operator is an effective one-electron operator that arises after constrained
minimization of the energy functional:

\begin{equation*}
  \tilde{\mathcal{F}} \left[ \{\psi_i\} \right] = \sum_i h_i +
  \frac{1}{2} \sum_{i,j} (J_{ij} - K_{ij}) - \sum_{i,j} \lambda_{ij}
  \left( \langle \psi_i | \psi_j \rangle - \delta_{ij} \right)
\end{equation*}

where \(h_i\) is the core Hamiltonian matrix and \(J_{ij}, K_{ij}\) are the Coulomb and
exchange components of the ERI matrix. To fully understand the derivation, consider
the variational derivative of this functional with respect to the complex
conjugate of the wave function \(\psi_i^*\):

\begin{align*}
  \lim_{\epsilon \to 0} \frac{\tilde{\mathcal{F}} \left[ \psi_k^* + \epsilon \delta
   \psi_k^* \right] - \tilde{\mathcal{F}} \left[ \psi_k^* \right]}{\epsilon} 
  &= \langle \delta \psi_k | \hat{h} | \psi_k \rangle + \sum_j \left( \langle \delta
   \psi_k \psi_j | \frac{1}{r} | \psi_k \psi_j \rangle - \langle \delta
   \psi_k \psi_j | \frac{1}{r} | \psi_j \psi_k \rangle \right)
   - \sum_j \lambda_{kj} \langle \delta \psi_k | \psi_j \rangle \\
  &= \int \left[ \hat{h} \psi_k(x) + \sum_j
     \left( \psi_k(x) \int \frac{|\psi_j(x')|^2}{|r - r'|} dx'
   - \psi_j(x) \int \frac{\psi_j^*(x') \psi_k(x')}{|r - r'|} dx' \right) \right.
   \left. - \sum_j \lambda_{kj} \psi_j(x) \right] \delta \psi_k^*(x) \, dx.
\end{align*}

As discussed earlier, basis sets are used to discretize the Hartree-Fock problem.
This process results in the  [[https://en.wikipedia.org/wiki/Roothaan_equations][Roothaan equations]], which are implemented in the code below.

#+begin_export html
</details>
#+end_export

#+begin_export html
<br/>
<details>
<summary>Performance</summary>
#+end_export

The computation of the ERIs is expected to be the primary bottleneck, as there are =N⋆4= of them—in our case, 16.
The required tensors have a shape of =6¨↕4=. As shown in the profile below, using an array-based strategy
for the ERIs significantly improved their computational efficiency compared to the two-center integrals.
For the latter, I increased the depth by grouping the tables (block matrices). The resulting code was significantly
slower than replicating the elements to match each axis' length, like I do for the ERIs.

#+begin_src bqn :exports both :tangle no :results raw :wrap example
  )profile {𝕊: F system}¨↕1e4
#+end_src

#+RESULTS:
#+begin_example
Got 38135 samples
(REPL): 37021 samples:
    92│F ← {𝕊e1‿e2‿z1‿z2‿r:
    72│  bs‿na‿nb ← (<∾·≢⊏∘>)⍉>STO¨ e1‿e2
  2127│  M ← {∾‿×({2: {nb(⋈˜/∘⋈˜)⊸⊔𝕎⌜˜𝕩}; 4: {𝕎⌜⍟3˜𝕩}}𝕩)¨○⊢<∘∾˘bs}
      │
   265│  sm‿hcore ← {e𝕊c:
    99│    mst ← ⌽⊸≍∾⟜0×˜r
  4235│    r1‿r2 ← <˘⍉⁼> (r⊸-⊸⋈˜×⟜r÷+)⌜´ ⊏bs
 15947│    mv ← ×˜∘{[0‿2,3‿1]⊏({0‿𝕨¨𝕩}⟜𝕩¨𝕨)∾⋈⟜⍉r⋈¨𝕩}´¨⟨0‿r, r1⟩‿⟨r‿0, r2⟩
  8864│    (⊑⋈·+´1⊸↓)+´∘⥊¨¨ c<⊸× ({e𝕏¨¨mst}¨S‿T) ∾ z1‿z2{e∾⟜𝕨⊸V¨¨𝕩}¨mv
  3980│  }´ M 2
      │
     9│  erim ← {e𝕊c:
  1049│    meri ← (c⊸×⊣ERI¨⊢/˜·<¨≢∘⊣÷≢∘⊢)⟜{0‿r⊏˜⚇1↕na¨↕=𝕩} e
   280│    =⊸{+˝∘⥊⎉𝕨 (2×↕𝕨)⍉⁼(na‿nb⥊˜na×𝕨)⥊𝕩} meri
     2│  }´ M 4
      │}
(self-hosted runtime1): 1114 samples
#+end_example

Morals: Never underestimate the power of vectorization and reshaping operations are often computationally trivial.

#+begin_export html
</details>
#+end_export

** SCF

Compare the electronic energy with the one computed using the original [[./supp/hf_so/hf_so.html][F66]] program.

#+begin_export html
<details>
<summary>Potential Energy Surface</summary>
#+end_export

The system's [[https://en.wikipedia.org/wiki/Potential_energy_surface][PES]] will be presented here. For now, it’s (you guessed it) the classic Lennard-Jones:

#+NAME: attr_wrap
#+BEGIN_SRC sh :var data="" :results output :exports none :tangle no
  echo '<div style="display: flex; justify-content: center; width: 100%;">'
  echo '<div style="width: 30%;">'
  echo "$data"
  echo "</div>"
  echo "</div>"
#+END_SRC

#+begin_src bqn :results html :exports both :tangle ./bqn/hf.bqn :post attr_wrap(data=*this*)
  )r LJ ← 1+4×(⋆⟜12-⋆⟜6)∘÷ ⋄ Setplot "line" ⋄ •Out¨ Plot´ (⊢⋈LJ) ↕∘⌈⌾((0.9+1e¯2×⊢)⁼)3
#+end_src

#+RESULTS:
#+begin_export html
<div style="display: flex; justify-content: center; width: 100%;">
<div style="width: 30%;">
<svg viewBox='-10 -10 404 404'>
  <g font-family='BQN,monospace' font-size='18px'>
    <rect class='code' style='fill:none;stroke:black' stroke-width='2' rx='5' x='-5' y='-5' width='394' height='394'/>
    <path class='code' style='fill:none;stroke:black' stroke-width='2' d='M0 0L1.837 64.166L3.675 118.353L5.512 164.084L7.349 202.64L9.187 235.106L11.024 262.399L12.861 285.297L14.699 304.457L16.536 320.44L18.373 333.72L20.211 344.703L22.048 353.731L23.885 361.098L25.722 367.055L27.56 371.814L29.397 375.559L31.234 378.443L33.072 380.6L34.909 382.145L36.746 383.173L38.584 383.767L40.421 384L42.258 383.931L44.096 383.612L45.933 383.088L47.77 382.395L49.608 381.568L51.445 380.632L53.282 379.611L55.12 378.526L56.957 377.392L58.794 376.224L60.632 375.035L62.469 373.833L64.306 372.628L66.144 371.427L67.981 370.236L69.818 369.058L71.656 367.899L73.493 366.761L75.33 365.647L77.167 364.558L79.005 363.497L80.842 362.464L82.679 361.461L84.517 360.487L86.354 359.542L88.191 358.628L90.029 357.743L91.866 356.888L93.703 356.061L95.541 355.263L97.378 354.493L99.215 353.751L101.053 353.035L102.89 352.345L104.727 351.68L106.565 351.04L108.402 350.423L110.239 349.83L112.077 349.258L113.914 348.708L115.751 348.179L117.589 347.67L119.426 347.18L121.263 346.709L123.1 346.255L124.938 345.819L126.775 345.399L128.612 344.995L130.45 344.607L132.287 344.233L134.124 343.874L135.962 343.528L137.799 343.195L139.636 342.874L141.474 342.566L143.311 342.269L145.148 341.984L146.986 341.709L148.823 341.444L150.66 341.189L152.498 340.944L154.335 340.707L156.172 340.48L158.01 340.261L159.847 340.049L161.684 339.846L163.522 339.65L165.359 339.461L167.196 339.278L169.033 339.103L170.871 338.934L172.708 338.77L174.545 338.613L176.383 338.461L178.22 338.314L180.057 338.173L181.895 338.037L183.732 337.905L185.569 337.778L187.407 337.656L189.244 337.537L191.081 337.423L192.919 337.312L194.756 337.206L196.593 337.103L198.431 337.003L200.268 336.907L202.105 336.814L203.943 336.724L205.78 336.638L207.617 336.554L209.455 336.473L211.292 336.394L213.129 336.318L214.967 336.245L216.804 336.174L218.641 336.105L220.478 336.038L222.316 335.974L224.153 335.912L225.99 335.851L227.828 335.793L229.665 335.736L231.502 335.682L233.34 335.628L235.177 335.577L237.014 335.527L238.852 335.479L240.689 335.432L242.526 335.387L244.364 335.343L246.201 335.3L248.038 335.259L249.876 335.219L251.713 335.18L253.55 335.142L255.388 335.106L257.225 335.07L259.062 335.036L260.9 335.002L262.737 334.97L264.574 334.938L266.411 334.908L268.249 334.878L270.086 334.849L271.923 334.821L273.761 334.794L275.598 334.767L277.435 334.742L279.273 334.717L281.11 334.693L282.947 334.669L284.785 334.646L286.622 334.624L288.459 334.602L290.297 334.581L292.134 334.561L293.971 334.541L295.809 334.522L297.646 334.503L299.483 334.484L301.321 334.467L303.158 334.449L304.995 334.432L306.833 334.416L308.67 334.4L310.507 334.385L312.344 334.369L314.182 334.355L316.019 334.34L317.856 334.326L319.694 334.313L321.531 334.3L323.368 334.287L325.206 334.274L327.043 334.262L328.88 334.25L330.718 334.238L332.555 334.227L334.392 334.216L336.23 334.205L338.067 334.195L339.904 334.184L341.742 334.174L343.579 334.165L345.416 334.155L347.254 334.146L349.091 334.137L350.928 334.128L352.766 334.12L354.603 334.111L356.44 334.103L358.278 334.095L360.115 334.087L361.952 334.08L363.789 334.072L365.627 334.065L367.464 334.058L369.301 334.051L371.139 334.044L372.976 334.038L374.813 334.031L376.651 334.025L378.488 334.019L380.325 334.013L382.163 334.007L384 334.001'/>
  </g>
</svg>
</div>
</div>
#+end_export

#+begin_export html
</details>
#+end_export

[fn:1] Recasting of the [[https://en.wikipedia.org/wiki/Schr%C3%B6dinger_equation#Time-independent_equation][TISE]] into a set of coupled integro-differential equations. Derived by optimizing
the expectation value of the energy subject to normalization constraints, then discretizing it using a suitable
basis set.
[fn:2] It may not look like much, but helonium was the very [[https://www.scientificamerican.com/article/the-first-molecule-in-the-universe/][first molecule]] formed in the universe.
[fn:3] This program can compute the Hartree-Fock energy of any two-electron diatomic molecule.
[fn:4] STO: functions of the form \(r^le^{-\zeta r}Y_l^m(\theta, \phi)\). For \(1s\) orbitals the
spherical harmonics integrate out to 1.
[fn:5] STO-nG: a non-linear least-squares fit of an STO as a weighted sum of n Gaussians.
[fn:6] See for example [[https://arxiv.org/abs/2007.12057][arXiv:2007.12057]].

#+BEGIN_EXPORT html
  <div style="text-align: center; font-size: 2em; padding: 20px 0;">
    <a href="https://panadestein.github.io/blog/" style="text-decoration: none;">⊑∘∞</a>
  </div>
#+END_EXPORT
