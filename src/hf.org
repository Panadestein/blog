# -*- eval: (face-remap-add-relative 'default '(:family "BQN386 Unicode" :height 180)); -*-
#+TITLE: Helonium's Hartree-Fock program
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="assets/style.css"/>
#+HTML_HEAD: <link rel="icon" href="assets/favicon.ico" type="image/x-icon">

** Exordium

We will implement the Hartree-Fock[fn:1] program from the classic [[https://store.doverpublications.com/products/9780486691862][Szabo-Ostlund]] text,
a staple in quantum chemistry. If you have any experience in the field, chances are you know it well.
If you don't, the BQN implementation will take you only a few cognitive units: the coarse mathematical
description involves basis sets, the calculation of electronic integrals, and the self-consistent
optimization of the Fock matrix. Using this program, we will compute the energy of the HeH\(^+\) molecule[fn:2].

First, we import the required BQN system values and define some auxiliary functions:

#+begin_src bqn :results none :tangle ./bqn/hf.bqn
  Sin‿Cos‿Tan‿Erf ← •math
  E ← 1e¯6⊸<◶(1-÷⟜3)‿((π÷4)⊸÷×⟜Erf○√⊢)
#+end_src

Then, we create a namespace with the physical constants defining the system[fn:3],
as is customary in /ab-initio/ methods:

#+begin_src bqn :results none :tangle ./bqn/hf.bqn
  system ← {
    e1‿e2 ⇐ 2.0925‿1.24
    z1‿z2 ⇐ 2‿1
    r ⇐ 1.4632 
  }
#+end_src

** STO-3G

Basis sets are used to transform the PDEs into linear algebra problems. Physical intuition suggests that
Slater type orbitals[fn:4] should be a good choice for our Hamiltonian. However, the computation of the integrals
is a lot easier if we approximate them with Gaussian functions[fn:5]. We define the approximating function:

#+begin_src bqn :results none :tangle ./bqn/hf.bqn
  STO ← {
    e ← 0.109818‿0.405771‿2.22766 ××˜ 𝕩
    c ← 0.444635‿0.535328‿0.154329
    e⋈c×(2×e÷π)⋆3÷4
  }
#+end_src

** Electronic integrals

Constructing the integrals' tensor is complicated[fn:6] and is the main reason for the poor scaling
of electronic structure methods. The \(1s\) orbitals are the simplest case, and here two types of integrals
are analytical (S, T) while the rest already lacks a closed-form solution (V, ERI):

#+begin_src bqn :results none :tangle ./bqn/hf.bqn 
  S ← {a‿b𝕊𝕩: (1.5⋆˜π÷a+b) × ⋆-𝕩×a(×÷+)b}
  T ← {a‿b𝕊𝕩: f ← a(×÷+)b ⋄ ×´⟨1.5⋆˜π÷a+b, (3×f)-2×𝕩××˜f, ⋆-𝕩×f⟩}
  V ← {a‿b‿z𝕊r‿s: ×´⟨-2×z×π÷a+b, E s×a+b, ⋆-r×a(×÷+)b⟩}
  ERI ← {a‿b‿c‿d𝕊r‿s‿t:
    f ← (a+b)×(c+d)×√a+b+c+d
    g‿h ← a‿b⋈○((×÷+)´)c‿d 
    ×´⟨2÷f×π⋆5÷2, E f⋆t, ⋆-+´r‿s×g‿h⟩
  }
#+end_src

#+begin_export html
<br/>
<details>
<summary>Derivation strategy</summary>
#+end_export

We need to compute the overlap (S), kinetic energy (T), nuclear attraction (V), and four-center (ERI) integrals.
Crucially, the product of two Gaussians at different centers is proportional to a Gaussian at a scaled center.
This property, combined with the Laplacian of a Gaussian, readily yields S and T. The remaining
two sets are more complex: we combine the Gaussians as before, then transform to reciprocal space where
the delta distribution arises and simplifies the problem to this integration by reduction:

\begin{equation*}
  I(x) = \int_0^{\infty}{{{e^ {- a\,k^2 }\,\sin \left(k\,x\right)}\over{k}}\;dk} \sim \text{Erf}(x)
\end{equation*}

#+begin_export html
</details>
#+end_export

The following function constructs the Fock matrix.

#+begin_src bqn :tangle ./bqn/hf.bqn
  F ← {𝕊e1‿e2‿z1‿z2‿r:
    bs‿nb ← (⊢⋈≠∘⊑)⍉>STO¨ e1‿e2
    r1‿r2 ← <˘⍉⁼> (r⊸-⊸⋈˜×⟜r÷+)⌜´ ⊏bs
    a‿d ← ⋈‿× {(⋈˜/nb‿nb) ⊔ 𝕎⌜˜𝕩}¨ <∘∾˘bs
    sm‿tm ← {+´∘⥊¨ d × a𝕏¨¨⌽⊸≍∾⟜0×˜r}¨ S‿T
    vm ← z1‿z2 {
      +´∘⥊¨ d × a∾⟜𝕨⊸V¨¨{×˜ [0‿2,3‿1] ⊏ ({0‿𝕨¨𝕩}⟜𝕩¨𝕨) ∾ ⋈⟜⍉r⋈¨𝕩}´𝕩
    }¨ ⟨⟨0‿r, r1⟩, ⟨r‿0, r2⟩⟩
    hcore ← +´vm∾<tm
  }
  F system
#+end_src

#+RESULTS:
: ┌─                                         
: ╵ ¯2.6527447246802547 ¯1.3472051723130691  
:   ¯1.3472051723130691 ¯1.7318283979165192  
:                                           ┘

** SCF

Compare the electronic energy with the one computed using the original [[./supp/hf_so/hf_so.html][F66]] program.

[fn:1] Recasting of the [[https://en.wikipedia.org/wiki/Schr%C3%B6dinger_equation#Time-independent_equation][TISE]] into a set of coupled integro-differential equations. Derived by optimizing
the expectation value of the energy subject to normalization constraints, then discretizing it using a suitable
basis set.
[fn:2] It may not look like much, but helonium was the very [[https://www.scientificamerican.com/article/the-first-molecule-in-the-universe/][first molecule]] formed in the universe.
[fn:3] This program can compute the Hartree-Fock energy of any two-electron diatomic molecule.
[fn:4] STO: functions of the form \(r^le^{-\zeta r}Y_l^m(\theta, \phi)\). For \(1s\) orbitals the
spherical harmonics integrate out to 1.
[fn:5] STO-nG: a non-linear least-squares fit of an STO as a weighted sum of n Gaussians.
[fn:6] See for example [[https://arxiv.org/abs/2007.12057][arXiv:2007.12057]].

#+BEGIN_EXPORT html
  <div style="text-align: center; font-size: 2em; padding: 20px 0;">
    <a href="https://panadestein.github.io/blog/" style="text-decoration: none;">⊑∘∞</a>
  </div>
#+END_EXPORT
