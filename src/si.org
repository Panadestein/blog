# -*- eval: (face-remap-add-relative 'default '(:family "BQN386 Unicode" :height 180)); -*-
#+TITLE: Scheming a mise-en-ab√Æme in BQN
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="assets/style.css"/>

** Prelude

We will build and interpreter for a subset of the Scheme programming language,
following a Norvig's [[https://www.norvig.com/lispy.html][essay]]. An alternative reference would
have been of course SICP's metacircular evaluator[fn:1], but I consider =lispy= to be
a very elegant implementation in a non-Lisp host.

** A Lisp quine

Given the title of this post, I couldn't think of a better test for our
interpreter than this one:

#+begin_src racket
  ((lambda (x) (list x (list (quote quote) x)))
   (quote (lambda (x) (list x (list (quote quote) x))))) 
#+end_src


[fn:1] I recommend SICP as further reading. Much like Louis Reasoner, I attempted
solving all the problems in the book, but I haven't gotten very far.
I believe there are some interesting Racket bits in my [[https://panadestein.github.io/solved-sicp/][solutions]], though.
