# -*- eval: (face-remap-add-relative 'default '(:family "BQN386 Unicode" :height 180)); -*-
#+TITLE: Scheming a mise-en-abîme in BQN
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="assets/style.css"/>
#+HTML_HEAD: <link rel="icon" href="assets/favicon.ico" type="image/x-icon">

** Prelude

We will build an interpreter for a subset of the Scheme programming language,
following an [[https://www.norvig.com/lispy.html][essay]] by Peter Norvig. An alternative reference would
have been of course SICP's metacircular evaluator[fn:1], but I consider =lispy= to be
a very elegant implementation targeting a non-Lisp host[fn:2].

/Achtung/: this post is a learning exercise. Most of what I know about
language implementation comes from self-study of a handful of books[fn:3]
and blogs like Norvig's.

** A R5RS dialect

Our goal is to adhere to the Revised\(^5\) Report on the Algorithmic Language Scheme ([[https://conservatory.scheme.org/schemers/Documents/Standards/R5RS/HTML/r5rs.html][R5RS]]).
However, seasoned schemers will quickly notice that our implementation still has
quite some distance to cover in reaching full compliance. Let's start by defining some
utilities. It is unfortunate that the 1-modifier is required,
given that Booleans are not that [[https://mlochbaum.github.io/BQN/tutorial/combinator.html#booleans][special]].

#+begin_src bqn :tangle ./bqn/si.bqn :results none
  _bool ← {𝔽◶"#f"‿"#t"}
#+end_src

A global environment:

#+begin_src bqn :tangle ./bqn/si.bqn
  env ← ⟨
    "sin", "cos", "tan", "asin", "acos", "atan"
    "log", "+", "-", "*", "/", ">", "<", ">=", "<=", "="
    "abs", "append", "apply", "begin", "car", "cdr", "cons"
    "eq?", "expt", "equal?", "length", "list", "list?"
    "map", "max", "min", "not", "null?", "number?"
    "print", "round", "symbol?", "nil", "pi"
  ⟩ •HashMap ⟨
    ⋆⁼, +´, -´, ×´, ÷´, >´, <´, ≥´, ≤´, =´
    |, ∾´, {𝕎𝕩}´, {𝕩}, ⊑, 1⊸↓, ⋈´
    ≡´_bool, ⋆´, =´_bool, ≠, ⋈, 0⊸=_bool{•Type•BQN⎊1𝕩}
    {𝕎¨𝕩}´, ⌈´, ⌊´, 0⊸≠_bool¬, @⊸=_bool, •BQN⎊1
    •Show, ⌊0.5+⊢, 2⊸=_bool{•Type⊑𝕩}, @, π
  ⟩ ∾˜ •math •ns.Get¨ "sin"‿"cos"‿"tan"‿"asin"‿"acos"‿"atan"
#+end_src

#+RESULTS:
: {get‿has‿set‿delete‿count‿keys‿values⇐}

The interpreter:

#+begin_src bqn :tangle ./bqn/si.bqn
  Scheme ← {
    T ← (⊢/˜·∨´¨' '⊸≠)(-⟜1·+`·¬⊸∧⟜»⊸∨·+˝"( )"=⌜⊢)⊸⊔
    R ← {
      𝕊⟨⟩: "Empty program"!0;
      𝕊𝕩: {
        "("≡⊑𝕨 ? l←⟨⟩ ⋄ l⋈1↓{t‿ts: ts⊣l∾↩<t}∘R•_while_(")"≢⊑) 𝕩;
        ")"≡⊑𝕨 ? "Unexpected )"!0 ;
        𝕩 ⋈˜ •ParseFloat⎊⊢ ⊑𝕨
      }´ 1(↑⋈↓)𝕩
    }
    E ← {
      env.Has 𝕩 ? env.Get 𝕩;
      1=•Type⊑⟨𝕩⟩ ? 𝕩;
      "if"≡⊑𝕩 ? ·‿tst‿cnd‿alt ← 𝕩 ⋄ env(⊣𝕊𝕊◶alt‿cnd)tst;
      "define"≡⊑𝕩 ? ·‿var‿val ← 𝕩 ⋄ ⟨⟩ ⊣ var env.Set env𝕊val;
      f ← env𝕊⊑𝕩 ⋄ F env⊸𝕊¨1↓𝕩 
    }
    P ← (⊢+˝("()"-"⟨⟩")×"⟨⟩"=⌜⊢)∘•Fmt·1⊸=∘≠◶⊢‿⊑∾⎊⊢
    P env⊸E⊑R∘T 𝕩
  }
#+end_src

#+RESULTS:
: (function block)

** A Lisp quine

Given the title of this post, it seems only fitting to test our interpreter
with a quine:

#+begin_src bqn :tangle ./bqn/si.bqn :exports both
  Scheme "((lambda (x) (list x (list (quote quote) x)))
           (quote (lambda (x) (list x (list (quote quote) x)))))"
#+end_src

#+RESULTS:
#+begin_example
Error: Stack overflow
at     "define"≡⊑𝕩 ? ·‿var‿val ← 𝕩 ⋄ ⟨⟩ ⊣ var env.Set env𝕊val;
                   ^
at     "if"≡⊑𝕩 ? ·‿tst‿cnd‿alt ← 𝕩 ⋄ env(⊣𝕊𝕊◶alt‿cnd)tst;
               ^
at     1=•Type⊑⟨𝕩⟩ ? 𝕩;
                   ^
at     env.Has 𝕩 ? env.Get 𝕩;
                 ^
at     f ← env𝕊⊑𝕩 ⋄ F env⊸𝕊¨1↓𝕩 
              ^
at     "define"≡⊑𝕩 ? ·‿var‿val ← 𝕩 ⋄ ⟨⟩ ⊣ var env.Set env𝕊val;
                   ^
at     "if"≡⊑𝕩 ? ·‿tst‿cnd‿alt ← 𝕩 ⋄ env(⊣𝕊𝕊◶alt‿cnd)tst;
               ^
at     1=•Type⊑⟨𝕩⟩ ? 𝕩;
                   ^
at     env.Has 𝕩 ? env.Get 𝕩;
                 ^
(4076 entries omitted)
at     f ← env𝕊⊑𝕩 ⋄ F env⊸𝕊¨1↓𝕩
#+end_example

Naturally, we can do more rigorous tests by comparing to my favorite Scheme
implementation[fn:4]. To achieve this, we'll leverage BQN's
foreign function interface:

#+begin_src bqn :tangle ./bqn/si.bqn :results none
  ch ← "../supp/chicken/libchicken.so" •FFI "*u8"‿"eval_scheme"‿">*u8:c8"
  R5RS ← {@+𝕩.Read¨ ↕1⊸+•_while_(0≠𝕩.Read)0}Ch
#+end_src

But fear not, there’s no room for monotony here. After all,
people much prefer dealing with machinery to dealing with bureaucracies[fn:5]:

#+begin_src bqn :tangle ./bqn/si.bqn :exports both
  ("Not Compliant"⊸!Scheme≡R5RS)¨ ⟨
    "(+ 10 122)"
    "(* 4 2)"
    "(begin (define r 10) (+ (/ 4 2) (* r r)))"
    "(if (> (* 11 11) 120) (* 7 6) oops)"
  ⟩
#+end_src

#+RESULTS:
: ⟨ 1 1 1 1 ⟩

If you manage to find any sneaky corner cases (modulo formatting, if you are comparing with Chicken)
that break the interpreter, do let me know!

[fn:1] I recommend SICP as further reading. Much like Louis Reasoner, I attempted
solving all the problems in the book, but I haven't gotten very far.
I believe there are some interesting Racket bits in my [[https://panadestein.github.io/solved-sicp/][solutions]], though.
[fn:2] I am not alone in this view; for instance, the [[https://www.fluentpython.com/][Lizard Book]] dedicates
an entire section to it.
[fn:3] For instance [[https://craftinginterpreters.com][Crafting Interpreters]] and [[https://www3.nd.edu/~dthain/compilerbook/][Introduction to Compilers and Language Design]].
[fn:4] One of my favorite hacker guidelines is [[http://www.call-with-current-continuation.org/articles/brutalist-manifesto.txt][The Brutalist Programming Manifesto]],
written by the creator of Chicken Scheme.
[fn:5] John McCarthy, [[http://jmc.stanford.edu/general/sayings.html][1986]].

#+BEGIN_EXPORT html
  <div style="text-align: center; font-size: 2em; padding: 20px 0;">
    <a href="https://panadestein.github.io/blog/" style="text-decoration: none;">⊑∘∞</a>
  </div>
#+END_EXPORT
