# -*- eval: (face-remap-add-relative 'default '(:family "BQN386 Unicode" :height 180)); -*-
#+TITLE: Scheming a mise-en-abîme in BQN (WIP)
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="assets/style.css"/>
#+HTML_HEAD: <link rel="icon" href="assets/favicon.ico" type="image/x-icon">

** Prelude

We will build and interpreter for a subset of the Scheme programming language,
following a Peter Norvig's [[https://www.norvig.com/lispy.html][essay]]. An alternative reference would
have been of course SICP's metacircular evaluator[fn:1], but I consider =lispy= to be
a very elegant implementation targeting a non-Lisp host[fn:2].

** A R5RS dialect

Our goal is to adhere to the Revised\(^5\) Report on the Algorithmic Language Scheme ([[https://conservatory.scheme.org/schemers/Documents/Standards/R5RS/HTML/r5rs.html][R5RS]]).
However, seasoned schemers will quickly notice that our implementation still has
quite some distance to cover in reaching full compliance. Let's start by defining some
utilities. It is sad that the 1-modifier is needed, after all,
Booleans are not that [[https://mlochbaum.github.io/BQN/tutorial/combinator.html#booleans][special]].

#+begin_src bqn :tangle ./bqn/si.bqn :results none
  _bool ← {𝔽◶"#f"‿"#t"}
#+end_src

A global environment:

#+begin_src bqn :tangle ./bqn/si.bqn
  env ← ⟨
    "sin", "cos", "tan", "asin", "acos", "atan",
    "log", "+", "-", "*", "/", ">", "<", ">=", "<=", "="
    "abs", "append", "apply", "begin", "car", "cdr", "cons"
    "eq?", "expt", "equal?", "length", "list", "list?"
    "map", "max", "min", "not", "null?", "number?"
    "print", "round", "symbol?"
  ⟩ •HashMap ⟨
    ⋆⁼, +´, -´, ×´, ÷´, >´, <´, ≥´, ≤´, =´
    |, ∾´, {𝕎𝕩}´, {𝕩}, ⊑, 1⊸↓, ⋈´
    ≡´_bool, ⋆´, =´_bool, ≠, ⋈, 0⊸=_bool{•Type•BQN⎊1𝕩}
    {𝕎¨𝕩}´, ⌈´, ⌊´, 0⊸≠_bool¬, @⊸=_bool, •BQN⎊1
    •Show, ⌊0.5+⊢, 2⊸=_bool{•Type⊑𝕩}
  ⟩ ∾˜ •math •ns.Get¨ "sin"‿"cos"‿"tan"‿"asin"‿"acos"‿"atan"
#+end_src

#+RESULTS:
: {get‿has‿set‿delete‿count‿keys‿values⇐}

The interpreter:

#+begin_src bqn :tangle ./bqn/si.bqn
  Scheme ← {
    T ← (0⌾⊑1-˜·+`·¬⊸∧⟜»⊸∨·+˝"( )"=⌜⊢)⊸⊔
    T𝕩
  } ⋄ Scheme "(begin (+ 1 1) (* (+ 3 2) 1) (define a (+ 3 3)))"
#+end_src

#+RESULTS:
: ⟨ "(" "begin" " " "(" "+" " " "1" " " "1" ")" " " "(" "*" " " "(" "+" " " "3" " " "2" ")" " " "1" ")" " " "(" "define" " " "a" " " "(" "+" " " "3" " " "3" ")" ")" ")" ⟩

** A Lisp quine

Given the title of this post, it seems only fitting to test our interpreter
with a quine:

#+begin_src bqn :tangle ./bqn/si.bqn :exports both
  Scheme "((lambda (x) (list x (list (quote quote) x)))
           (quote (lambda (x) (list x (list (quote quote) x)))))"
#+end_src

#+RESULTS:
: "((lambda (x) (list x (list (quote quote) x)))
:          (quote (lambda (x) (list x (list (quote quote) x)))))"

Naturally, we can do more rigorous tests by comparing to my favorite Scheme
implementation, [[https://call-cc.org/][Chicken]]. To achieve this, we'll leverage BQN's
foreign function interface:

#+begin_src bqn :tangle ./bqn/si.bqn :results none
  ch ← "../supp/chicken/libchicken.so" •FFI "*u8"‿"eval_scheme"‿">*u8:c8"
  R5RS ← {@+𝕩.Read¨ ↕1⊸+•_while_(0≠𝕩.Read)0}Ch∾@
#+end_src

But fear not, there’s no room for monotony here. After all,
people much prefer dealing with machinery to dealing with bureaucracies[fn:3]:

#+begin_src bqn :tangle ./bqn/si.bqn :exports both
  ("Not Compliant"⊸!Scheme≡R5RS)¨ "(+ 10 122)"‿"(* 4 2)"
#+end_src

#+RESULTS:
: ⟨ ⟨ "(+ 10 122)" "132" ⟩ ⟨ "(* 4 2)" "8" ⟩ ⟩

[fn:1] I recommend SICP as further reading. Much like Louis Reasoner, I attempted
solving all the problems in the book, but I haven't gotten very far.
I believe there are some interesting Racket bits in my [[https://panadestein.github.io/solved-sicp/][solutions]], though.
[fn:2] This is due to the concept behind the essay, certainly not because of Python.
As Norvig himself [[https://news.ycombinator.com/item?id=1803815][remarked]], Python excels in communication, not necessarily in programming.
[fn:3] John McCarthy, [[http://jmc.stanford.edu/general/sayings.html][1986]].

#+BEGIN_EXPORT html
  <div style="text-align: center; font-size: 2em; padding: 20px 0;">
    <a href="https://panadestein.github.io/blog/" style="text-decoration: none;">⊑∘∞</a>
  </div>
#+END_EXPORT
